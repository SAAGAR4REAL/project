Awesome—here’s a **plug-and-play set of updates** you asked for. I’ve kept your structure and only replaced/added files that need changes. Copy–paste each file into your project under the same paths.

---

# src/common/styles.css  *(replace your common.css)*

```css
:root{
  --brand-blue:#0072CE;
  --brand-blue-2:#0055a4;
  --brand-green:#00A859;
  --brand-dark:#00172b;
  --brand-bg:#0a2a4d;          /* page blue */
  --brand-bg-2:#0e3561;
  --text-on-dark:#ffffff;
  --muted:#8fb3d9;
  --tile-hover: rgba(255,255,255,0.12);
  --border: rgba(255,255,255,0.15);
}

/* Page base */
html,body,#root{height:100%;}
body{
  background: linear-gradient(180deg,var(--brand-bg),var(--brand-bg-2));
  color:#f5f8fc;
  font-family: 'Segoe UI', system-ui, -apple-system, Arial, sans-serif;
}

/* App chrome */
.app-shell{
  min-height:100%;
  display:flex; flex-direction:column;
}
.app-main{
  flex:1 1 auto;
  display:flex; gap:0;
}
.app-content{
  flex:1 1 auto;
  padding:24px;
}

/* Header */
.app-header{
  position:sticky; top:0; z-index:1000;
  background:linear-gradient(90deg,var(--brand-blue),var(--brand-green));
  color:var(--text-on-dark);
  padding:10px 16px;
  border-bottom:1px solid var(--border);
}
.app-header .brand{
  display:flex; align-items:center; gap:10px;
}
.header-logo{ height:36px; }
.header-title{ font-weight:700; letter-spacing:.3px; }
.header-crumb{
  font-size:13px; opacity:.9;
}
.header-right{
  display:flex; align-items:center; gap:10px;
}
.header-pill{
  background:rgba(255,255,255,.15);
  border:1px solid var(--border);
  border-radius:999px;
  padding:6px 10px;
  font-size:13px;
}
.btn-logout{
  border:1px solid var(--border);
  background:transparent;
  color:#fff;
  border-radius:8px;
  padding:6px 10px;
}
.btn-logout:hover{ background:var(--tile-hover); }

/* Sidebar (hidden on dashboard) */
.sidebar{
  width:260px; flex:0 0 260px;
  background:linear-gradient(180deg,var(--brand-blue),var(--brand-blue-2));
  color:#fff; border-right:1px solid var(--border);
  min-height:calc(100vh - 64px);
}
.sidebar .welcome{
  padding:16px; border-bottom:1px solid var(--border);
}
.sidebar .nav{
  padding:8px 0; margin:0; list-style:none;
}
.sidebar .nav-link{
  display:flex; align-items:center; gap:10px;
  padding:10px 16px; color:#fff; text-decoration:none;
}
.sidebar .nav-link:hover{ background:var(--tile-hover); }
.sidebar .active{
  background:rgba(0,0,0,.15);
  border-left:4px solid #fff; padding-left:12px;
}

/* Dashboard tiles */
.dashboard-heading{
  background:rgba(255,255,255,.1);
  border:1px solid var(--border);
  border-radius:12px; padding:10px 14px; margin-bottom:16px;
}
.tiles{ display:grid; grid-template-columns:repeat(auto-fill,minmax(260px,1fr)); gap:16px; }
.tile{
  background:rgba(255,255,255,.06); color:#fff;
  border:1px solid var(--border); border-radius:14px;
  padding:18px; cursor:pointer;
  transition:transform .15s ease, box-shadow .15s ease, background .15s ease;
}
.tile:hover{ transform:translateY(-3px); background:var(--tile-hover); box-shadow:0 10px 18px rgba(0,0,0,.2); }
.tile h5{ margin:0 0 6px; }
.tile .muted{ color:var(--muted); font-size:13px; }

/* Quick stats / cards */
.card{
  background:rgba(255,255,255,.06);
  border:1px solid var(--border); border-radius:12px;
  color:#fff;
}
.card-header{ padding:10px 14px; border-bottom:1px solid var(--border); }
.card-body{ padding:14px; }

/* Buttons */
.btn, .btn-sm{
  background:var(--brand-blue);
  border:1px solid var(--brand-blue-2);
  color:#fff; border-radius:10px;
}
.btn:hover{ background:var(--brand-green); border-color:var(--brand-green); }
.btn-outline{
  background:transparent; border:1px solid var(--border);
}
.btn-danger{ background:#c0392b; border-color:#c0392b; }
.btn-success{ background:#2ecc71; border-color:#2ecc71; }
.btn-warning{ background:#f1c40f; border-color:#f1c40f; color:#1a1a1a; }

/* Tables */
.table{ width:100%; border-collapse:collapse; }
.table th,.table td{ border:1px solid var(--border); padding:8px; }
.table thead{ background:rgba(255,255,255,.08); }

/* Footer */
.app-footer{
  background:linear-gradient(90deg,var(--brand-blue-2),var(--brand-blue));
  color:#fff; border-top:1px solid var(--border);
  padding:10px 16px; font-size:14px;
}

/* Login animations */
.login-hero{
  animation: fadeUp .6s ease both;
}
@keyframes fadeUp{
  from{ opacity:0; transform:translateY(8px); }
  to{ opacity:1; transform:translateY(0); }
}
.login-welcome{
  position:fixed; inset:0; background:rgba(0,0,0,.55);
  display:flex; align-items:center; justify-content:center;
  color:#fff; font-size:28px; z-index:2000;
  animation: fadeUp .25s ease both;
}

/* Utility */
.grid{ display:grid; gap:16px; }
.grid-2{ grid-template-columns:repeat(2,1fr); }
.grid-3{ grid-template-columns:repeat(3,1fr); }
.badge{
  display:inline-block; padding:4px 8px; border-radius:999px; font-size:12px;
  border:1px solid var(--border); background:rgba(255,255,255,.08);
}
```

---

# src/common/components/Header.jsx  *(new / replace)*

```jsx
import React from "react";
import { useLocation, useNavigate } from "react-router-dom";
import logo from "../../assets/sc-logo.png";

export default function Header(){
  const navigate = useNavigate();
  const { pathname } = useLocation();
  const currentUser = JSON.parse(localStorage.getItem("currentUser")||"null");
  const lastLogin = localStorage.getItem("lastLogin");

  // Breadcrumb: "Payment Initiations / Page"
  const map = {
    "/dashboard":"Dashboard",
    "/payroll":"Create Payroll",
    "/manage-payroll":"Manage Payroll",
    "/approvals":"Approve Payroll",
    "/balances":"Account Balance",
    "/txns":"Transactions",
    "/print":"Print Preview",
    "/login":"Login"
  };
  const here = map[pathname] || "—";

  const logout = () => {
    localStorage.removeItem("allowedPages");
    localStorage.removeItem("currentUser");
    localStorage.removeItem("lastLogin");
    navigate("/login");
  };

  return (
    <header className="app-header">
      <div className="d-flex align-items-center justify-content-between">
        <div className="brand">
          <img className="header-logo" src={logo} alt="SCB"/>
          <div>
            <div className="header-title">Payment Initiations</div>
            <div className="header-crumb">Home / {here}</div>
          </div>
        </div>

        <div className="header-right">
          {currentUser && (
            <>
              <span className="header-pill">
                👤 {currentUser.role} ({currentUser.username})
              </span>
              {lastLogin && (
                <span className="header-pill">
                  Last login: {new Date(lastLogin).toLocaleString()}
                </span>
              )}
            </>
          )}
          <button className="btn-logout" onClick={logout}>Logout</button>
        </div>
      </div>
    </header>
  );
}
```

---

# src/common/components/Sidebar.jsx  *(new / replace)*

```jsx
import React from "react";
import { NavLink } from "react-router-dom";

export default function Sidebar(){
  const allowedPages = JSON.parse(localStorage.getItem("allowedPages")||"[]");
  const currentUser = JSON.parse(localStorage.getItem("currentUser")||"null");

  const ALL = [
    {name:"Dashboard", path:"/dashboard", icon:"🏠"},
    {name:"Create Payroll", path:"/payroll", icon:"💸"},
    {name:"Manage Payroll", path:"/manage-payroll", icon:"📂"},
    {name:"Approve Payroll", path:"/approvals", icon:"✅"},
    {name:"Account Balance", path:"/balances", icon:"💰"},
    {name:"Transactions", path:"/txns", icon:"📊"},
    {name:"Print Preview", path:"/print", icon:"🖨️"},
  ];

  const allowed = new Set(allowedPages.map(p=>p.path));
  const filtered = ALL.filter(p=>allowed.has(p.path));

  return (
    <aside className="sidebar">
      <div className="welcome">
        <div className="fw-bold">Welcome, {currentUser?.username}</div>
        <div className="text-white-50" style={{fontSize:13}}>{currentUser?.role}</div>
      </div>
      <ul className="nav">
        {filtered.map(item=>(
          <li key={item.path}>
            <NavLink to={item.path} className={({isActive}) => `nav-link ${isActive?'active':''}`}>
              <span style={{fontSize:18}}>{item.icon}</span>
              <span>{item.name}</span>
            </NavLink>
          </li>
        ))}
      </ul>
    </aside>
  );
}
```

---

# src/common/components/Footer.jsx  *(new / replace)*

```jsx
import React from "react";

export default function Footer(){
  const currentUser = JSON.parse(localStorage.getItem("currentUser")||"null");
  return (
    <footer className="app-footer">
      <div className="d-flex justify-content-between align-items-center">
        <span>Welcome, {currentUser?.username ?? "Guest"} — Standard Chartered Bank</span>
        <span>© {new Date().getFullYear()} Standard Chartered</span>
      </div>
    </footer>
  );
}
```

---

# src/common/utils/pdf.js  *(new)*

```jsx
// Minimal print-to-PDF helper (opens styled window and invokes print)
export function openPrintWindow({ title = "Report", html }) {
  const w = window.open("", "_blank");
  w.document.write(`
    <html>
      <head>
        <title>${title}</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
        <style>
          body{ font-family: Segoe UI, Arial, sans-serif; padding:24px; }
          .brand-head{ display:flex; align-items:center; gap:12px; margin-bottom:16px; border-bottom:3px solid #0072CE; padding-bottom:10px; }
          .brand-head img{ height:44px;}
          .brand-title{ font-weight:700; font-size:20px; color:#0072CE;}
          .muted{ color:#555; }
          table{ border:1px solid #ccc !important; }
          th,td{ border:1px solid #ddd !important; padding:6px 8px !important;}
          .section{ margin-top:16px; }
        </style>
      </head>
      <body>
        ${html}
      </body>
    </html>
  `);
  w.document.close();
  w.focus();
  w.print(); // user can save as PDF
}
```

---

# src/common/storage/payrollStore.js  *(replace with this – adds balance deduction + txns + PDFs)*

```jsx
// Simple localStorage-based store for payroll + accounts + transactions
const KEY_BATCHES = "pi_batches";
const KEY_TXNS    = "pi_transactions";
const KEY_ACCTS   = "pi_accounts";

// Initialize if missing
function init(){
  if(!localStorage.getItem(KEY_BATCHES)) localStorage.setItem(KEY_BATCHES,"[]");
  if(!localStorage.getItem(KEY_TXNS))    localStorage.setItem(KEY_TXNS,"[]");
  if(!localStorage.getItem(KEY_ACCTS)){
    // seed from mock if provided globally
    const seed = [
      { id:"1", number:"001-123456-01", name:"Main Ops", currency:"USD", balance: 150000 },
      { id:"2", number:"001-987654-02", name:"Payroll Pool", currency:"USD", balance: 250000 },
      { id:"3", number:"044-555999-03", name:"AP Account", currency:"INR", balance: 9000000 },
    ];
    localStorage.setItem(KEY_ACCTS, JSON.stringify(seed));
  }
}
init();

// ---------- Helper IO ----------
const read = k => JSON.parse(localStorage.getItem(k)||"[]");
const write = (k,v) => localStorage.setItem(k, JSON.stringify(v));

// ---------- Batches ----------
export function getAllBatches(){ return read(KEY_BATCHES); }
export function getBatchById(id){ return getAllBatches().find(b=>String(b.id)===String(id)); }
export function upsertBatch(batch){
  const all = getAllBatches();
  const idx = all.findIndex(b=>String(b.id)===String(batch.id));
  if(idx>=0) all[idx] = batch; else all.unshift(batch);
  write(KEY_BATCHES, all);
}
export function deleteBatch(id){
  write(KEY_BATCHES, getAllBatches().filter(b=>String(b.id)!==String(id)));
}
export function setStatus(id, status, meta = {}){
  const all = getAllBatches();
  const idx = all.findIndex(b=>String(b.id)===String(id));
  if(idx<0) return;
  const batch = all[idx];
  batch.status = status;
  Object.assign(batch, meta);
  batch.updatedAt = new Date().toISOString();

  // When Approved → deduct and create transactions
  if(status === "Approved"){
    const debitAcc = batch.instruction?.debitAccount;
    const ccy = batch.instruction?.paymentCurrency;
    const total = (batch.payments||[]).reduce((s,p)=> s + Number(p.amount||0), 0);
    if(debitAcc){
      adjustAccount(debitAcc, -total);
      const txns = getAllTransactions();
      txns.unshift({
        id: `TX-${Date.now()}`,
        type: "PAYROLL",
        batchId: batch.id,
        account: debitAcc,
        currency: ccy,
        amount: total,
        direction: "DEBIT",
        createdAt: new Date().toISOString(),
        items: batch.payments
      });
      write(KEY_TXNS, txns);
    }
  }
  write(KEY_BATCHES, all);
}

// ---------- Accounts ----------
export function getAccounts(){ return read(KEY_ACCTS); }
export function getAccountByNumber(num){ return getAccounts().find(a=>a.number===num); }
export function adjustAccount(number, delta){
  const accts = getAccounts();
  const idx = accts.findIndex(a=>a.number===number);
  if(idx<0) return;
  accts[idx].balance = Number(accts[idx].balance||0) + Number(delta||0);
  write(KEY_ACCTS, accts);
}

// ---------- Transactions ----------
export function getAllTransactions(){ return read(KEY_TXNS); }
export function getTransactionsForAccount(number){
  return getAllTransactions().filter(t=>t.account===number);
}

// ---------- Generic download text (legacy) ----------
export function downloadText(filename, content){
  const blob = new Blob([content], {type: "text/plain"});
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href=url; a.download=filename; a.click();
  URL.revokeObjectURL(url);
}
```

---

# src/pages/account-balance/AccountBalance.jsx  *(replace – functional, with PDF)*

```jsx
import React, { useEffect, useMemo, useState } from "react";
import { getAccounts, getTransactionsForAccount } from "../../common/storage/payrollStore";
import { openPrintWindow } from "../../common/utils/pdf";

export default function AccountBalance(){
  const [accounts, setAccounts] = useState([]);
  const [selected, setSelected] = useState("");
  const [txns, setTxns] = useState([]);

  useEffect(()=>{
    setAccounts(getAccounts());
  },[]);

  useEffect(()=>{
    if(selected){
      setTxns(getTransactionsForAccount(selected));
    }else setTxns([]);
  },[selected]);

  const acct = useMemo(()=> accounts.find(a=>a.number===selected), [accounts, selected]);

  const downloadPDF = () => {
    if(!acct) return;
    const rows = txns.map((t,i)=>`
      <tr>
        <td>${i+1}</td>
        <td>${t.id}</td>
        <td>${new Date(t.createdAt).toLocaleString()}</td>
        <td>${t.type}</td>
        <td>${t.direction}</td>
        <td>${t.amount} ${t.currency}</td>
      </tr>
    `).join("");

    openPrintWindow({
      title:`Statement_${acct.number}`,
      html: `
        <div class="brand-head">
          <img src="./assets/sc-logo.png" />
          <div>
            <div class="brand-title">Standard Chartered — Account Statement</div>
            <div class="muted">${acct.number} &middot; ${acct.name}</div>
          </div>
        </div>
        <div>Currency: <b>${acct.currency}</b> &nbsp; | &nbsp; Current Balance: <b>${acct.balance}</b></div>
        <div class="section">
          <table class="table table-sm">
            <thead><tr><th>#</th><th>Txn ID</th><th>Date/Time</th><th>Type</th><th>Dir</th><th>Amount</th></tr></thead>
            <tbody>${rows || `<tr><td colspan="6">No transactions</td></tr>`}</tbody>
          </table>
        </div>
      `
    });
  };

  return (
    <div className="container">
      <div className="dashboard-heading">
        <strong>Account Balances</strong>
      </div>

      <div className="grid grid-3">
        <div className="card">
          <div className="card-header">Select Account</div>
          <div className="card-body">
            <select className="form-select" value={selected} onChange={e=>setSelected(e.target.value)}>
              <option value="">Choose...</option>
              {accounts.map(a=>(
                <option key={a.id} value={a.number}>{a.number} — {a.name}</option>
              ))}
            </select>
            {acct && (
              <div className="mt-3">
                <div><b>Account:</b> {acct.number}</div>
                <div><b>Name:</b> {acct.name}</div>
                <div><b>Currency:</b> {acct.currency}</div>
                <div><b>Current Balance:</b> {acct.balance}</div>
              </div>
            )}
          </div>
        </div>

        <div className="card" style={{gridColumn:"span 2"}}>
          <div className="card-header d-flex justify-content-between align-items-center">
            <span>Transactions</span>
            <button className="btn btn-sm" onClick={downloadPDF}>Download PDF</button>
          </div>
          <div className="card-body" style={{overflow:auto}}>
            <table className="table">
              <thead>
                <tr><th>#</th><th>Txn ID</th><th>Date/Time</th><th>Type</th><th>Dir</th><th>Amount</th></tr>
              </thead>
              <tbody>
                {txns.length===0 && <tr><td colSpan="6">No transactions for this account.</td></tr>}
                {txns.map((t,i)=>(
                  <tr key={t.id}>
                    <td>{i+1}</td>
                    <td>{t.id}</td>
                    <td>{new Date(t.createdAt).toLocaleString()}</td>
                    <td>{t.type}</td>
                    <td>{t.direction}</td>
                    <td>{t.amount} {t.currency}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  );
}
```

---

# src/pages/approval/Approval.jsx  *(only change: Re-uses setStatus that now deducts balance + PDF still works)*

*(Your previous ApprovePayroll works; keep it. If you want its “Download Summary” also as PDF, swap to `openPrintWindow` similar to AccountBalance.)*

Example change in your existing file (replace `downloadSummary` function):

```jsx
import { openPrintWindow } from "../../common/utils/pdf";

// ...
const downloadSummary = (batch) => {
  const payments = batch.payments.map((p,i)=>`
    <tr><td>${i+1}</td><td>${p.payeeName}</td><td>${p.accountNumber||p.bankDetails||"-"}</td><td>${p.amount} ${batch.instruction.paymentCurrency}</td></tr>
  `).join("");

  openPrintWindow({
    title:`Payroll_${batch.id}_Summary`,
    html: `
      <div class="brand-head">
        <img src="./assets/sc-logo.png" />
        <div>
          <div class="brand-title">Standard Chartered — Payroll Batch Summary</div>
          <div class="muted">Batch: ${batch.id} &nbsp; | &nbsp; Status: ${batch.status}</div>
        </div>
      </div>
      <div><b>Debit Account:</b> ${batch.instruction.debitAccount} &nbsp; | &nbsp; <b>Currency:</b> ${batch.instruction.paymentCurrency} &nbsp; | &nbsp; <b>Date:</b> ${batch.instruction.date}</div>
      <div class="section">
        <table class="table table-sm">
          <thead><tr><th>#</th><th>Payee</th><th>Account/Bank</th><th>Amount</th></tr></thead>
          <tbody>${payments}</tbody>
        </table>
      </div>
    `
  });
};
```

---

# src/pages/transaction-list/TransactionList.jsx  *(updated to reflect new store)*

```jsx
import React, { useEffect, useMemo, useState } from "react";
import { getAllTransactions } from "../../common/storage/payrollStore";
import { openPrintWindow } from "../../common/utils/pdf";

export default function TransactionList(){
  const [txns, setTxns] = useState([]);
  const [q, setQ] = useState("");

  useEffect(()=>{ setTxns(getAllTransactions()); },[]);

  const filtered = useMemo(()=> {
    const s = q.trim().toLowerCase();
    if(!s) return txns;
    return txns.filter(t => Object.values(t).join(" ").toLowerCase().includes(s));
  }, [q, txns]);

  const pdf = () => {
    const rows = filtered.map((t,i)=>`
      <tr>
        <td>${i+1}</td><td>${t.id}</td><td>${t.account}</td><td>${t.direction}</td><td>${t.amount} ${t.currency}</td><td>${new Date(t.createdAt).toLocaleString()}</td>
      </tr>`).join("");
    openPrintWindow({
      title:"Transactions",
      html: `
        <div class="brand-head">
          <img src="./assets/sc-logo.png" />
          <div><div class="brand-title">Standard Chartered — Transactions</div></div>
        </div>
        <table class="table table-sm"><thead><tr><th>#</th><th>Txn</th><th>Account</th><th>Direction</th><th>Amount</th><th>Date</th></tr></thead><tbody>${rows}</tbody></table>
      `
    });
  };

  return (
    <div className="container">
      <div className="d-flex justify-content-between align-items-center dashboard-heading">
        <strong>Transactions</strong>
        <div className="d-flex gap-2">
          <input className="form-control" placeholder="Search…" value={q} onChange={e=>setQ(e.target.value)} />
          <button className="btn btn-sm" onClick={pdf}>Download PDF</button>
        </div>
      </div>

      <div className="card">
        <div className="card-body" style={{overflow:auto}}>
          <table className="table">
            <thead><tr><th>#</th><th>Txn</th><th>Account</th><th>Direction</th><th>Amount</th><th>Date</th></tr></thead>
            <tbody>
              {filtered.length===0 && <tr><td colSpan="6">No transactions.</td></tr>}
              {filtered.map((t,i)=>(
                <tr key={t.id}>
                  <td>{i+1}</td><td>{t.id}</td><td>{t.account}</td><td>{t.direction}</td><td>{t.amount} {t.currency}</td><td>{new Date(t.createdAt).toLocaleString()}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}
```

---

# src/pages/dashboard/Dashboard.jsx  *(replace – filled with stats + quick actions; sidebar hidden on dashboard via layout below)*

```jsx
import React, { useEffect, useMemo, useState, useRef } from "react";
import { useNavigate } from "react-router-dom";
import { getAllBatches, getAccounts, getAllTransactions } from "../../common/storage/payrollStore";

export default function Dashboard(){
  const navigate = useNavigate();
  const currentUser = JSON.parse(localStorage.getItem("currentUser")||"null");
  const allowedPages = JSON.parse(localStorage.getItem("allowedPages")||"[]");
  const [batches, setBatches] = useState([]);
  const [accts, setAccts]   = useState([]);
  const [txns, setTxns]     = useState([]);

  // fetch data
  useEffect(()=>{
    setBatches(getAllBatches());
    setAccts(getAccounts());
    setTxns(getAllTransactions());
  },[]);

  // KPIs
  const kpi = useMemo(()=>{
    const submitted = batches.filter(b=>b.status==="Submitted").length;
    const approved  = batches.filter(b=>b.status==="Approved").length;
    const rejected  = batches.filter(b=>b.status==="Rejected").length;
    const totalPay  = batches.reduce((s,b)=> s + (b.payments||[]).reduce((x,p)=>x+Number(p.amount||0),0),0);
    return {submitted, approved, rejected, totalPay};
  },[batches]);

  // Tiny chart (no deps)
  const canvasRef = useRef(null);
  useEffect(()=>{
    if(!canvasRef.current) return;
    const ctx = canvasRef.current.getContext("2d");
    const byMonth = Array(6).fill(0);
    txns.forEach(t=>{
      const d = new Date(t.createdAt);
      const idx = (new Date().getMonth() - d.getMonth() + 12) % 12; // rough last months
      if(idx<6) byMonth[5-idx] += Number(t.amount||0);
    });
    const W = canvasRef.current.width = canvasRef.current.offsetWidth;
    const H = canvasRef.current.height = 160;
    ctx.clearRect(0,0,W,H);
    const max = Math.max(1, ...byMonth);
    const bw = W / (byMonth.length*1.6);
    byMonth.forEach((v,i)=>{
      const x = (i+1)* (W/(byMonth.length+1));
      const h = (v/max)*(H-30);
      ctx.fillStyle = "#8fd0ff";
      ctx.fillRect(x-bw/2, H-h-10, bw, h);
      ctx.fillStyle = "#d8ecff";
      ctx.font = "12px Segoe UI";
      ctx.fillText(v.toFixed(0), x-12, H-h-16);
    });
  },[txns]);

  const quickActions = allowedPages; // uses same list
  const go = (p)=> navigate(p.path);

  return (
    <div className="container">
      <div className="dashboard-heading">
        <div><strong>Welcome, {currentUser?.username}</strong> — {currentUser?.role}</div>
      </div>

      <div className="grid grid-3">
        <div className="card">
          <div className="card-header">Quick Stats</div>
          <div className="card-body">
            <div>Submitted: <span className="badge">{kpi.submitted}</span></div>
            <div>Approved: <span className="badge">{kpi.approved}</span></div>
            <div>Rejected: <span className="badge">{kpi.rejected}</span></div>
            <div>Total Payroll Value: <span className="badge">{kpi.totalPay}</span></div>
          </div>
        </div>

        <div className="card" style={{gridColumn:"span 2"}}>
          <div className="card-header">Payments (Last 6 periods)</div>
          <div className="card-body">
            <canvas ref={canvasRef} style={{width:"100%", height:160}} />
          </div>
        </div>
      </div>

      <div className="mt-3 tiles">
        {quickActions.map(p=>(
          <div className="tile" key={p.path} onClick={()=>go(p)}>
            <h5>{p.name}</h5>
            <div className="muted">Go to {p.name}</div>
          </div>
        ))}
      </div>
    </div>
  );
}
```

---

# src/pages/login/Login.jsx  *(replace – animated + friendly roles + welcome overlay)*

```jsx
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import PrimaryButton from '../../common/components/PrimaryButton'; // if you use it; else replace with <button>
import './login.css';
import logo from './sc-logo.png';

const roleMap = { maker:"Creator", checker:"Approver", auditor:"Viewer" };

const userAccess = {
  maker: {
    password: 'maker123',
    pages: [
      { name: 'Create Payroll', path: '/payroll' },
      { name: 'Manage Payroll', path: '/manage-payroll' },
      { name: 'Transactions', path: '/txns' },
    ],
  },
  checker: {
    password: 'checker123',
    pages: [
      { name: 'Approve Payroll', path: '/approvals' },
      { name: 'Account Balance', path: '/balances' },
      { name: 'Transactions', path: '/txns' },
    ],
  },
  auditor: {
    password: 'audit123',
    pages: [
      { name: 'Print Preview', path: '/print' },
      { name: 'Transactions', path: '/txns' },
    ],
  },
};

export default function Login(){
  const [username,setUsername] = useState('');
  const [pwd,setPwd] = useState('');
  const [error,setError] = useState('');
  const [overlay,setOverlay] = useState('');
  const navigate = useNavigate();

  const submit = (e)=>{
    e.preventDefault();
    const key = username.trim().toLowerCase();
    const user = userAccess[key];
    if(user && user.password===pwd){
      const userObj = { username:key, role:roleMap[key] };
      localStorage.setItem("currentUser", JSON.stringify(userObj));
      localStorage.setItem("allowedPages", JSON.stringify(user.pages));
      localStorage.setItem("lastLogin", new Date().toISOString());
      setOverlay(`Welcome, ${userObj.role} (${userObj.username})`);
      setTimeout(()=> navigate("/dashboard"), 900);
    }else{
      setError("Invalid username or password");
    }
  };

  return (
    <>
      {overlay && <div className="login-welcome">{overlay}</div>}
      <div className="container" style={{maxWidth:980, marginTop:60}}>
        <div className="d-flex align-items-center justify-content-center login-hero" style={{gap:18}}>
          <img src={logo} alt="SCB" style={{height:56}}/>
          <h2>Payment Initiations</h2>
        </div>

        <div className="card mt-3" style={{maxWidth:520, margin:"0 auto"}}>
          <div className="card-body">
            <h4 className="mb-2">Sign in</h4>
            <p className="text-white-50" style={{marginTop:-6}}>maker / checker / auditor</p>
            {error && <div className="alert alert-danger">{error}</div>}
            <form onSubmit={submit}>
              <div className="mb-2">
                <label className="form-label">User ID</label>
                <input className="form-control" value={username} onChange={e=>setUsername(e.target.value)} />
              </div>
              <div className="mb-3">
                <label className="form-label">Password</label>
                <input type="password" className="form-control" value={pwd} onChange={e=>setPwd(e.target.value)} />
              </div>
              <button className="btn w-100">Sign In</button>
            </form>
          </div>
        </div>
      </div>
    </>
  );
}
```

---

# src/App.js  *(replace – shows Sidebar only on functional pages, not on dashboard/login)*

```jsx
import React from "react";
import { BrowserRouter as Router, Routes, Route, Navigate, useLocation } from "react-router-dom";
import Header from "./common/components/Header";
import Footer from "./common/components/Footer";
import Sidebar from "./common/components/Sidebar";

import Login from "./pages/login/Login";
import Dashboard from "./pages/dashboard/Dashboard";
import PayrollPayment from "./pages/payroll/PayrollPayment";
import ManagePayroll from "./pages/payroll/ManagePayroll";
import ApprovePayroll from "./pages/approval/Approval";
import TransactionList from "./pages/transaction-list/TransactionList";
import AccountBalance from "./pages/account-balance/AccountBalance";
import PrintPreview from "./pages/print-preview/PrintPreview";

function ProtectedRoute({ children, allowedRoles }){
  const currentUser = JSON.parse(localStorage.getItem("currentUser"));
  if(!currentUser) return <Navigate to="/login" replace />;
  if(allowedRoles && !allowedRoles.map(r=>r.toLowerCase()).includes(currentUser.role.toLowerCase()))
    return <Navigate to="/dashboard" replace />;
  return children;
}

function Layout({ children }){
  const { pathname } = useLocation();
  const hideSidebar = pathname==="/login" || pathname==="/dashboard";
  return (
    <div className="app-shell">
      <Header />
      <div className="app-main">
        {!hideSidebar && <Sidebar />}
        <main className="app-content">{children}</main>
      </div>
      <Footer />
    </div>
  );
}

export default function App(){
  return (
    <Router>
      <Routes>
        <Route path="/" element={<Navigate to="/login" replace />} />
        <Route path="/login" element={
          <Layout><Login/></Layout>
        } />
        <Route path="/dashboard" element={
          <Layout><Dashboard/></Layout>
        } />

        {/* Creator (maker) */}
        <Route path="/payroll" element={
          <Layout>
            <ProtectedRoute allowedRoles={["Creator"]}><PayrollPayment/></ProtectedRoute>
          </Layout>
        } />
        <Route path="/manage-payroll" element={
          <Layout>
            <ProtectedRoute allowedRoles={["Creator"]}><ManagePayroll/></ProtectedRoute>
          </Layout>
        } />

        {/* Approver (checker) */}
        <Route path="/approvals" element={
          <Layout>
            <ProtectedRoute allowedRoles={["Approver"]}><ApprovePayroll/></ProtectedRoute>
          </Layout>
        } />
        <Route path="/balances" element={
          <Layout>
            <ProtectedRoute allowedRoles={["Approver"]}><AccountBalance/></ProtectedRoute>
          </Layout>
        } />

        {/* Viewer (auditor) */}
        <Route path="/print" element={
          <Layout>
            <ProtectedRoute allowedRoles={["Viewer"]}><PrintPreview/></ProtectedRoute>
          </Layout>
        } />

        {/* Shared */}
        <Route path="/txns" element={<Layout><TransactionList/></Layout>} />
      </Routes>
    </Router>
  );
}

Updated.....
export default function App(){
  return (
    <Router>
      <Routes>
        <Route path="/" element={<Navigate to="/login" replace />} />
        
        {/* Login page should not have Header, Footer, Sidebar */}
        <Route path="/login" element={<Login />} />

        {/* Dashboard (with header/footer) */}
        <Route path="/dashboard" element={
          <Layout><Dashboard/></Layout>
        } />

        {/* Creator (maker) */}
        <Route path="/payroll" element={
          <Layout>
            <ProtectedRoute allowedRoles={["Creator"]}><PayrollPayment/></ProtectedRoute>
          </Layout>
        } />
        <Route path="/manage-payroll" element={
          <Layout>
            <ProtectedRoute allowedRoles={["Creator"]}><ManagePayroll/></ProtectedRoute>
          </Layout>
        } />

        {/* Approver (checker) */}
        <Route path="/approvals" element={
          <Layout>
            <ProtectedRoute allowedRoles={["Approver"]}><ApprovePayroll/></ProtectedRoute>
          </Layout>
        } />
        <Route path="/balances" element={
          <Layout>
            <ProtectedRoute allowedRoles={["Approver"]}><AccountBalance/></ProtectedRoute>
          </Layout>
        } />

        {/* Viewer (auditor) */}
        <Route path="/print" element={
          <Layout>
            <ProtectedRoute allowedRoles={["Viewer"]}><PrintPreview/></ProtectedRoute>
          </Layout>
        } />

        {/* Shared */}
        <Route path="/txns" element={<Layout><TransactionList/></Layout>} />
      </Routes>
    </Router>
  );
}

```

---

### Notes / What’s covered

* **Dashboard upgraded** with KPIs, tiny chart & quick actions; **uniform styling**.
* **Header** shows *current user, role (Creator/Approver/Viewer), last login* and breadcrumb.
* **Balances** page now **reflects deductions** after Approvals and can **download PDF** statement.
* **Approval** page can **download PDF** summaries (you can apply the shown snippet).
* **Transactions** page shows all txns + **PDF**.
* **All PDFs**: brand logo + styled via `openPrintWindow`.
* **Footer**: “Welcome, user — Standard Chartered Bank”.
* **Sidebar**: shows only on functional pages, matches header colors, **hidden on dashboard**.
* **Body**: blue background matching header/footer.
* **Login**: animated welcome overlay + role mapping and uniform buttons.
* **Continuity**: unified colors, buttons, cards, spacing.

If you want, I can also patch your **ManagePayroll** and **PayrollPayment** to add **PDF preview** buttons the same way (one-liners using `openPrintWindow`).

Got it 👍 You want to **integrate account balances with the Payroll Payment (create payment) page** so that when the **Creator (Maker)** selects a debit account and enters a payment, we check the account’s balance and later deduct it when the Approver approves the payroll.

Here’s the step-by-step update:

---

### 1. 📂 `src/common/mockData.js`

Add some accounts with balances if not already present:

```js
export const accounts = [
  { id: 1, number: "123-456-789", name: "Main Corporate Account", balance: 100000 },
  { id: 2, number: "987-654-321", name: "Salary Account", balance: 50000 },
  { id: 3, number: "555-333-111", name: "Vendor Account", balance: 75000 },
];
```

---

### 2. 📂 `src/common/storage/accountStore.js`

Create a small **account storage utility** to manage balances:

```js
// src/common/storage/accountStore.js
import { accounts } from "../mockData";

const ACCOUNT_KEY = "accounts";

export function getAccounts() {
  const stored = localStorage.getItem(ACCOUNT_KEY);
  return stored ? JSON.parse(stored) : accounts;
}

export function saveAccounts(updated) {
  localStorage.setItem(ACCOUNT_KEY, JSON.stringify(updated));
}

// Deduct balance after approval
export function deductFromAccount(accountNumber, amount) {
  const all = getAccounts();
  const idx = all.findIndex((a) => a.number === accountNumber);
  if (idx !== -1) {
    all[idx].balance -= amount;
    saveAccounts(all);
  }
}
```

---

### 3. 📂 `src/pages/payroll/PayrollPayment.jsx`

👉 Update the **Instruction Details** section to **show the selected account balance dynamically**.

Find this part:

```jsx
<div className="col-12 col-md-4">
  <label className="form-label fw-semibold">
    Select Debit Account <span className="text-danger">*</span>
  </label>
  <select
    className="form-select form-select-sm"
    name="debitAccount"
    value={instruction.debitAccount}
    onChange={onInstruction}
    required
  >
    <option value="">Select Debit Account</option>
    {accounts.map((a) => (
      <option key={a.id} value={a.number}>
        {a.number} — {a.name}
      </option>
    ))}
  </select>
</div>
```

🔽 Replace with this:

```jsx
<div className="col-12 col-md-4">
  <label className="form-label fw-semibold">
    Select Debit Account <span className="text-danger">*</span>
  </label>
  <select
    className="form-select form-select-sm"
    name="debitAccount"
    value={instruction.debitAccount}
    onChange={onInstruction}
    required
  >
    <option value="">Select Debit Account</option>
    {accounts.map((a) => (
      <option key={a.id} value={a.number}>
        {a.number} — {a.name} (Balance: {a.balance.toLocaleString()})
      </option>
    ))}
  </select>
</div>
```

✅ Now the dropdown shows account balance alongside the account.

---

### 4. 📂 `src/pages/approval/Approval.jsx`

When the **Approver approves**, deduct the money:

Find where you already approve:

```js
const confirmDecision = () => {
  if (enteredPasscode === APPROVER_PASSCODE) {
    const { batchId, decision } = pendingDecision;
    const meta = {
      approvedBy: "Approver User",
      approvedAt: new Date().toISOString(),
      remarks: remarks[batchId] || "",
    };
    setStatus(batchId, decision, meta);
    refresh();
    setMessage(`Payroll batch ${decision} successfully!`);
    setShowPasscodeModal(false);
  } else {
    setMessage("❌ Incorrect passcode. Try again.");
  }
};
```

🔽 Update it like this:

```js
import { deductFromAccount } from "../../common/storage/accountStore";

// inside confirmDecision:
if (enteredPasscode === APPROVER_PASSCODE) {
  const { batchId, decision } = pendingDecision;
  const batch = submissions.find((b) => b.id === batchId);

  if (decision === "Approved") {
    // Calculate total
    const totalAmount = batch.payments.reduce((sum, p) => sum + Number(p.amount || 0), 0);
    deductFromAccount(batch.instruction.debitAccount, totalAmount);
  }

  const meta = {
    approvedBy: "Approver User",
    approvedAt: new Date().toISOString(),
    remarks: remarks[batchId] || "",
  };
  setStatus(batchId, decision, meta);
  refresh();
  setMessage(`Payroll batch ${decision} successfully!`);
  setShowPasscodeModal(false);
}
```

---

✅ **Result after integration:**

* Creator sees available balances when creating a payment.
* Approver’s approval deducts money from the chosen debit account.
* The updated balance is reflected in the **Account Balance page** (we’ll wire that up fully next).

---

Do you want me to now **update the Account Balance page** to fetch the updated balances and also allow PDF report download?

import React, { useState, useEffect } from "react";
import { getAccounts } from "../../common/storage/accountStore";
import { getAllBatches } from "../../common/storage/payrollStore";
import BackToDashboard from "../../common/components/BackToDashboard";
import { jsPDF } from "jspdf";
import scLogo from "../../assets/sc-logo.png"; // <-- ensure logo exists

export default function AccountBalance() {
  const [accounts, setAccounts] = useState([]);
  const [selectedAcc, setSelectedAcc] = useState("");
  const [transactions, setTransactions] = useState([]);

  useEffect(() => {
    setAccounts(getAccounts());
  }, []);

  useEffect(() => {
    if (selectedAcc) {
      const batches = getAllBatches();
      const txns = [];

      batches.forEach((batch) => {
        if (batch.status === "Approved" && batch.instruction.debitAccount === selectedAcc) {
          batch.payments.forEach((p) => {
            txns.push({
              ref: p.reference,
              payee: p.payeeName,
              amount: p.amount,
              date: batch.approvedAt,
              type: "Debit",
            });
          });
        }
      });

      setTransactions(txns);
    }
  }, [selectedAcc]);

  const downloadReport = () => {
    if (!selectedAcc) return;
    const account = accounts.find((a) => a.number === selectedAcc);
    const doc = new jsPDF();

    // Logo
    doc.addImage(scLogo, "PNG", 15, 10, 30, 20);
    doc.setFontSize(16);
    doc.text("Standard Chartered Bank", 60, 20);
    doc.setFontSize(12);
    doc.text("Account Balance Report", 60, 30);

    // Account details
    doc.setFontSize(11);
    doc.text(`Account: ${account.number} - ${account.name}`, 15, 50);
    doc.text(`Balance: ${account.balance}`, 15, 60);
    doc.text(`Generated on: ${new Date().toLocaleString()}`, 15, 70);

    // Transactions
    let y = 90;
    doc.setFontSize(10);
    doc.text("Transactions:", 15, y);
    y += 10;

    if (transactions.length === 0) {
      doc.text("No transactions found.", 15, y);
    } else {
      transactions.forEach((t, i) => {
        doc.text(
          `${i + 1}. ${t.date ? new Date(t.date).toLocaleString() : "-"} | ${t.type} | ${t.payee} | ${t.amount}`,
          15,
          y
        );
        y += 8;
      });
    }

    doc.save(`Account_${account.number}_Report.pdf`);
  };

  return (
    <div className="container my-4">
      <div className="d-flex justify-content-between align-items-center mb-3">
        <h2>Account Balances</h2>
        <BackToDashboard />
      </div>

      {/* Account Selector */}
      <div className="row mb-4">
        <div className="col-md-6">
          <label className="form-label fw-semibold">Select Account</label>
          <select
            className="form-select"
            value={selectedAcc}
            onChange={(e) => setSelectedAcc(e.target.value)}
          >
            <option value="">-- Choose an account --</option>
            {accounts.map((a) => (
              <option key={a.id} value={a.number}>
                {a.number} — {a.name} (Balance: {a.balance.toLocaleString()})
              </option>
            ))}
          </select>
        </div>
      </div>

      {/* Transactions */}
      {selectedAcc && (
        <>
          <h5>Transactions</h5>
          <div className="table-responsive">
            <table className="table table-bordered text-center">
              <thead className="table-light">
                <tr>
                  <th>Reference</th>
                  <th>Payee</th>
                  <th>Amount</th>
                  <th>Type</th>
                  <th>Date</th>
                </tr>
              </thead>
              <tbody>
                {transactions.length === 0 ? (
                  <tr>
                    <td colSpan="5">No transactions found.</td>
                  </tr>
                ) : (
                  transactions.map((t, i) => (
                    <tr key={i}>
                      <td>{t.ref}</td>
                      <td>{t.payee}</td>
                      <td>{t.amount}</td>
                      <td>{t.type}</td>
                      <td>{t.date ? new Date(t.date).toLocaleString() : "-"}</td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </div>

          <button className="btn btn-primary mt-3" onClick={downloadReport}>
            Download PDF Report
          </button>
        </>
      )}
    </div>
  );
}




Got it 👍
That’s because right now your PayrollPayment → Approvals → AccountBalance flow isn’t actually updating balances — it only stores payments in batches. Let me explain and then I’ll give you the fix:


---

🔎 Current Situation

PayrollPayment.jsx → creates a batch and saves it in payrollStore.

Approvals.jsx → sets status Approved/Rejected.

AccountBalance.jsx → is just showing static accounts from mockData.js.
👉 No deduction is linked to the Approved payments.



---

✅ What We Need To Do

1. Update account balances when a batch is approved.

Subtract total amount from the selected Debit Account.

Save the transaction history for that account.



2. Modify accountBalanceStore.js to:

Store balances in localStorage.

Track transactions (Approved batches).



3. Update Approval.jsx so that when a batch is approved:

Deduct from balance.

Push transaction into account history.



4. Update AccountBalance.jsx to:

Fetch balances from storage.

Show transactions for the selected account.

Enable PDF download with logo + metadata.





---

🔧 Step 1: Create accountBalanceStore.js (in /src/common/storage/)

// src/common/storage/accountBalanceStore.js
const BALANCE_KEY = "accounts_data";

// Initialize with mock accounts if not present
export function initAccounts(accounts) {
  if (!localStorage.getItem(BALANCE_KEY)) {
    localStorage.setItem(BALANCE_KEY, JSON.stringify(accounts));
  }
}

export function getAccounts() {
  return JSON.parse(localStorage.getItem(BALANCE_KEY)) || [];
}

export function updateAccountBalance(accountNumber, amount, txn) {
  const accounts = getAccounts();
  const accIndex = accounts.findIndex(a => a.number === accountNumber);
  if (accIndex !== -1) {
    accounts[accIndex].balance =
      Number(accounts[accIndex].balance) - Number(amount);

    // Push transaction
    if (!accounts[accIndex].transactions) accounts[accIndex].transactions = [];
    accounts[accIndex].transactions.push({
      ...txn,
      date: new Date().toISOString(),
    });

    localStorage.setItem(BALANCE_KEY, JSON.stringify(accounts));
  }
}


---

🔧 Step 2: Update Approval.jsx

In confirmDecision after approving a batch:

import { updateAccountBalance } from "../../common/storage/accountBalanceStore";

const confirmDecision = () => {
  if (enteredPasscode === APPROVER_PASSCODE) {
    const { batchId, decision } = pendingDecision;
    const batch = submissions.find(b => b.id === batchId);

    if (decision === "Approved") {
      const total = batch.payments.reduce((s, p) => s + Number(p.amount || 0), 0);
      updateAccountBalance(batch.instruction.debitAccount, total, {
        type: "Payroll Payment",
        batchId,
        amount: total,
        status: "Approved"
      });
    }

    const meta = {
      approvedBy: "Approver User",
      approvedAt: new Date().toISOString(),
      remarks: remarks[batchId] || "",
    };
    setStatus(batchId, decision, meta);
    refresh();
    setMessage(`Payroll batch ${decision} successfully!`);
    setShowPasscodeModal(false);
  } else {
    setMessage("❌ Incorrect passcode. Try again.");
  }
};


---

🔧 Step 3: Update AccountBalance.jsx

Replace your static accounts fetch with:

import { getAccounts } from "../../common/storage/accountBalanceStore";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import logo from "../../assets/sc-logo.png";

export default function AccountBalance() {
  const [accounts, setAccounts] = useState([]);

  useEffect(() => {
    setAccounts(getAccounts());
  }, []);

  const downloadStatement = (account) => {
    const doc = new jsPDF();
    doc.addImage(logo, "PNG", 10, 10, 30, 15);
    doc.setFontSize(16);
    doc.text("Account Statement", 50, 20);
    doc.setFontSize(12);
    doc.text(`Account: ${account.number} (${account.name})`, 10, 40);
    doc.text(`Balance: ${account.balance}`, 10, 50);

    autoTable(doc, {
      startY: 60,
      head: [["Date", "Type", "Batch ID", "Amount", "Status"]],
      body: (account.transactions || []).map(t => [
        new Date(t.date).toLocaleString(),
        t.type,
        t.batchId,
        t.amount,
        t.status,
      ]),
    });

    doc.save(`Account_${account.number}_Statement.pdf`);
  };


---

🔧 Step 4: Initialize Accounts

In your index.js or App.js:

import { initAccounts } from "./common/storage/accountBalanceStore";
import { accounts } from "./common/mockData";

initAccounts(accounts);


---

👉 With this:

When a batch is approved → account balance is deducted.

Transaction is saved in account history.

AccountBalance shows updated balance + downloadable PDF statement.



---

Do you want me to also auto-update the Dashboard quick stats (balances + last transactions) with this new account balance data?

Perfect 🚀

Let’s wire Dashboard Quick Stats to the new account balances + transactions so it feels alive.


---

🔧 Step 1: Update Dashboard.jsx

We’ll fetch balances + last transactions from our new accountBalanceStore.

// src/pages/Dashboard.jsx
import React, { useEffect, useState } from "react";
import { getAccounts } from "../common/storage/accountBalanceStore";
import { Card, Row, Col } from "react-bootstrap";

export default function Dashboard() {
  const [accounts, setAccounts] = useState([]);

  useEffect(() => {
    setAccounts(getAccounts());
  }, []);

  const totalBalance = accounts.reduce((sum, acc) => sum + Number(acc.balance), 0);
  const recentTxns = accounts.flatMap(acc =>
    (acc.transactions || []).map(t => ({ ...t, acc: acc.number }))
  )
  .sort((a, b) => new Date(b.date) - new Date(a.date))
  .slice(0, 5);

  return (
    <div className="container-fluid my-4">
      <h2 className="mb-4">Dashboard</h2>

      {/* Quick Stats */}
      <Row className="mb-4">
        <Col md={4}>
          <Card className="card-shadow text-center p-3">
            <h5>Total Balance</h5>
            <h3 className="text-success">{totalBalance.toLocaleString()} USD</h3>
          </Card>
        </Col>
        <Col md={4}>
          <Card className="card-shadow text-center p-3">
            <h5>Accounts</h5>
            <h3>{accounts.length}</h3>
          </Card>
        </Col>
        <Col md={4}>
          <Card className="card-shadow text-center p-3">
            <h5>Transactions</h5>
            <h3>{recentTxns.length}</h3>
          </Card>
        </Col>
      </Row>

      {/* Recent Transactions */}
      <Card className="card-shadow p-3">
        <h5 className="mb-3">Recent Transactions</h5>
        {recentTxns.length === 0 ? (
          <p>No transactions yet.</p>
        ) : (
          <div className="table-responsive">
            <table className="table table-sm table-bordered text-center">
              <thead className="table-light">
                <tr>
                  <th>Date</th>
                  <th>Account</th>
                  <th>Type</th>
                  <th>Batch ID</th>
                  <th>Amount</th>
                  <th>Status</th>
                </tr>
              </thead>
              <tbody>
                {recentTxns.map((t, i) => (
                  <tr key={i}>
                    <td>{new Date(t.date).toLocaleString()}</td>
                    <td>{t.acc}</td>
                    <td>{t.type}</td>
                    <td>{t.batchId}</td>
                    <td>{t.amount}</td>
                    <td>
                      <span
                        className={
                          "badge " +
                          (t.status === "Approved"
                            ? "bg-success"
                            : t.status === "Rejected"
                            ? "bg-danger"
                            : "bg-secondary")
                        }
                      >
                        {t.status}
                      </span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </Card>
    </div>
  );
}


---

🔧 Step 2: Style Updates (in common.css)

/* Quick stats cards */
.card-shadow h3 {
  font-weight: bold;
  margin: 0;
}


---

🖼️ What You Get

Quick Stats Row:

✅ Total Balance across all accounts

✅ Number of Accounts

✅ Number of Transactions (recent)


Recent Transactions Table (5 most recent across accounts).



---

👉 Next Step: Do you also want me to integrate graphical charts (pie/bar/line using Chart.js) in this Dashboard so balances + transactions are visual, or keep it only as cards + table?





Nice 😎 — let’s level it up with Chart.js graphs inside the dashboard.


---

🔧 Step 1: Install Chart.js & React wrapper

Run this in your project:

npm install chart.js react-chartjs-2


---

🔧 Step 2: Update Dashboard.jsx

We’ll add:

📊 Pie chart for balances distribution across accounts

📈 Bar chart for transaction amounts by account


// src/pages/Dashboard.jsx
import React, { useEffect, useState } from "react";
import { getAccounts } from "../common/storage/accountBalanceStore";
import { Card, Row, Col } from "react-bootstrap";
import { Pie, Bar } from "react-chartjs-2";
import {
  Chart as ChartJS,
  Title,
  Tooltip,
  Legend,
  ArcElement,
  CategoryScale,
  LinearScale,
  BarElement,
} from "chart.js";

ChartJS.register(Title, Tooltip, Legend, ArcElement, CategoryScale, LinearScale, BarElement);

export default function Dashboard() {
  const [accounts, setAccounts] = useState([]);

  useEffect(() => {
    setAccounts(getAccounts());
  }, []);

  const totalBalance = accounts.reduce((sum, acc) => sum + Number(acc.balance), 0);
  const recentTxns = accounts
    .flatMap(acc =>
      (acc.transactions || []).map(t => ({ ...t, acc: acc.number }))
    )
    .sort((a, b) => new Date(b.date) - new Date(a.date))
    .slice(0, 5);

  // 📊 Pie Chart Data for Balances
  const balanceData = {
    labels: accounts.map(a => a.number),
    datasets: [
      {
        data: accounts.map(a => a.balance),
        backgroundColor: ["#0072CE", "#00A859", "#FFC107", "#FF5733", "#6F42C1"],
      },
    ],
  };

  // 📈 Bar Chart Data for Transactions
  const txnData = {
    labels: accounts.map(a => a.number),
    datasets: [
      {
        label: "Total Transactions (Amount)",
        data: accounts.map(a =>
          (a.transactions || []).reduce((sum, t) => sum + Number(t.amount), 0)
        ),
        backgroundColor: "#0072CE",
      },
    ],
  };

  return (
    <div className="container-fluid my-4">
      <h2 className="mb-4">Dashboard</h2>

      {/* Quick Stats */}
      <Row className="mb-4">
        <Col md={4}>
          <Card className="card-shadow text-center p-3">
            <h5>Total Balance</h5>
            <h3 className="text-success">{totalBalance.toLocaleString()} USD</h3>
          </Card>
        </Col>
        <Col md={4}>
          <Card className="card-shadow text-center p-3">
            <h5>Accounts</h5>
            <h3>{accounts.length}</h3>
          </Card>
        </Col>
        <Col md={4}>
          <Card className="card-shadow text-center p-3">
            <h5>Transactions</h5>
            <h3>
              {accounts.reduce((sum, acc) => sum + (acc.transactions?.length || 0), 0)}
            </h3>
          </Card>
        </Col>
      </Row>

      {/* Charts */}
      <Row className="mb-4">
        <Col md={6}>
          <Card className="card-shadow p-3">
            <h5 className="mb-3">Balance Distribution</h5>
            <Pie data={balanceData} />
          </Card>
        </Col>
        <Col md={6}>
          <Card className="card-shadow p-3">
            <h5 className="mb-3">Transactions by Account</h5>
            <Bar data={txnData} />
          </Card>
        </Col>
      </Row>

      {/* Recent Transactions */}
      <Card className="card-shadow p-3">
        <h5 className="mb-3">Recent Transactions</h5>
        {recentTxns.length === 0 ? (
          <p>No transactions yet.</p>
        ) : (
          <div className="table-responsive">
            <table className="table table-sm table-bordered text-center">
              <thead className="table-light">
                <tr>
                  <th>Date</th>
                  <th>Account</th>
                  <th>Type</th>
                  <th>Batch ID</th>
                  <th>Amount</th>
                  <th>Status</th>
                </tr>
              </thead>
              <tbody>
                {recentTxns.map((t, i) => (
                  <tr key={i}>
                    <td>{new Date(t.date).toLocaleString()}</td>
                    <td>{t.acc}</td>
                    <td>{t.type}</td>
                    <td>{t.batchId}</td>
                    <td>{t.amount}</td>
                    <td>
                      <span
                        className={
                          "badge " +
                          (t.status === "Approved"
                            ? "bg-success"
                            : t.status === "Rejected"
                            ? "bg-danger"
                            : "bg-secondary")
                        }
                      >
                        {t.status}
                      </span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </Card>
    </div>
  );
}


---

🔧 Step 3: Add Styles in common.css

/* Dashboard charts */
.card-shadow canvas {
  max-height: 300px;
}


---

✅ Now your Dashboard has:

Quick stats

Balance distribution pie chart

Transactions by account bar chart

Recent transactions table



---

Do you also want me to add a notification section (like “⚡ 2 new payments awaiting approval”) inside the Dashboard stats row?




Perfect 🔥 let’s add a notification section that shows live role-based alerts right inside the Dashboard!

I’ll extend your Dashboard.jsx with:

A notifications card (⚡)

Role-based messages (creator, approver, viewer)



---

🔧 Updated Dashboard.jsx

// src/pages/Dashboard.jsx
import React, { useEffect, useState } from "react";
import { getAccounts } from "../common/storage/accountBalanceStore";
import { getAllBatches } from "../common/storage/payrollStore";
import { Card, Row, Col } from "react-bootstrap";
import { Pie, Bar } from "react-chartjs-2";
import {
  Chart as ChartJS,
  Title,
  Tooltip,
  Legend,
  ArcElement,
  CategoryScale,
  LinearScale,
  BarElement,
} from "chart.js";

ChartJS.register(Title, Tooltip, Legend, ArcElement, CategoryScale, LinearScale, BarElement);

export default function Dashboard() {
  const [accounts, setAccounts] = useState([]);
  const [batches, setBatches] = useState([]);

  const currentUser = JSON.parse(localStorage.getItem("currentUser")) || {
    username: "Guest",
    role: "viewer",
  };

  useEffect(() => {
    setAccounts(getAccounts());
    setBatches(getAllBatches());
  }, []);

  const totalBalance = accounts.reduce((sum, acc) => sum + Number(acc.balance), 0);
  const recentTxns = accounts
    .flatMap(acc =>
      (acc.transactions || []).map(t => ({ ...t, acc: acc.number }))
    )
    .sort((a, b) => new Date(b.date) - new Date(a.date))
    .slice(0, 5);

  // 📊 Pie Chart Data for Balances
  const balanceData = {
    labels: accounts.map(a => a.number),
    datasets: [
      {
        data: accounts.map(a => a.balance),
        backgroundColor: ["#0072CE", "#00A859", "#FFC107", "#FF5733", "#6F42C1"],
      },
    ],
  };

  // 📈 Bar Chart Data for Transactions
  const txnData = {
    labels: accounts.map(a => a.number),
    datasets: [
      {
        label: "Total Transactions (Amount)",
        data: accounts.map(a =>
          (a.transactions || []).reduce((sum, t) => sum + Number(t.amount), 0)
        ),
        backgroundColor: "#0072CE",
      },
    ],
  };

  // 🔔 Notifications based on role
  const getNotifications = () => {
    if (currentUser.role === "creator") {
      const drafts = batches.filter(b => b.status === "Draft").length;
      return [`${drafts} drafts waiting to be submitted.`];
    }
    if (currentUser.role === "approver") {
      const pending = batches.filter(b => b.status === "Submitted").length;
      return [`${pending} payrolls pending approval.`];
    }
    if (currentUser.role === "viewer") {
      return ["Viewing mode: You can only see reports & transactions."];
    }
    return ["No notifications."];
  };

  const notifications = getNotifications();

  return (
    <div className="container-fluid my-4">
      <h2 className="mb-4">Dashboard</h2>

      {/* Quick Stats */}
      <Row className="mb-4">
        <Col md={3}>
          <Card className="card-shadow text-center p-3">
            <h5>Total Balance</h5>
            <h3 className="text-success">{totalBalance.toLocaleString()} USD</h3>
          </Card>
        </Col>
        <Col md={3}>
          <Card className="card-shadow text-center p-3">
            <h5>Accounts</h5>
            <h3>{accounts.length}</h3>
          </Card>
        </Col>
        <Col md={3}>
          <Card className="card-shadow text-center p-3">
            <h5>Transactions</h5>
            <h3>
              {accounts.reduce((sum, acc) => sum + (acc.transactions?.length || 0), 0)}
            </h3>
          </Card>
        </Col>
        <Col md={3}>
          <Card className="card-shadow text-center p-3 bg-light">
            <h5>⚡ Notifications</h5>
            <ul className="list-unstyled mb-0">
              {notifications.map((n, i) => (
                <li key={i}>• {n}</li>
              ))}
            </ul>
          </Card>
        </Col>
      </Row>

      {/* Charts */}
      <Row className="mb-4">
        <Col md={6}>
          <Card className="card-shadow p-3">
            <h5 className="mb-3">Balance Distribution</h5>
            <Pie data={balanceData} />
          </Card>
        </Col>
        <Col md={6}>
          <Card className="card-shadow p-3">
            <h5 className="mb-3">Transactions by Account</h5>
            <Bar data={txnData} />
          </Card>
        </Col>
      </Row>

      {/* Recent Transactions */}
      <Card className="card-shadow p-3">
        <h5 className="mb-3">Recent Transactions</h5>
        {recentTxns.length === 0 ? (
          <p>No transactions yet.</p>
        ) : (
          <div className="table-responsive">
            <table className="table table-sm table-bordered text-center">
              <thead className="table-light">
                <tr>
                  <th>Date</th>
                  <th>Account</th>
                  <th>Type</th>
                  <th>Batch ID</th>
                  <th>Amount</th>
                  <th>Status</th>
                </tr>
              </thead>
              <tbody>
                {recentTxns.map((t, i) => (
                  <tr key={i}>
                    <td>{new Date(t.date).toLocaleString()}</td>
                    <td>{t.acc}</td>
                    <td>{t.type}</td>
                    <td>{t.batchId}</td>
                    <td>{t.amount}</td>
                    <td>
                      <span
                        className={
                          "badge " +
                          (t.status === "Approved"
                            ? "bg-success"
                            : t.status === "Rejected"
                            ? "bg-danger"
                            : "bg-secondary")
                        }
                      >
                        {t.status}
                      </span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </Card>
    </div>
  );
}


---

🔧 What’s new:

Role-based notifications appear in the dashboard.

Creator → sees how many drafts to submit.

Approver → sees how many payrolls to approve.

Viewer → sees a “read-only mode” message.


Notifications are styled in a ⚡ card tile alongside quick stats.



---

Got it ✅ — I’ll consolidate everything into **one place** so you can just copy-paste.
Here’s the **full updated codebase** for **User Story 6 (transaction print / preview)** and **User Story 7 (account balance with statements + drill down + status)**.

---

# 🔹 1. `src/common/storage/accountBalanceStore.js`

```javascript
// src/common/storage/accountBalanceStore.js

const STORAGE_KEY = "accounts_data_v2";

// Save accounts to localStorage
export function saveAccounts(accounts) {
  localStorage.setItem(STORAGE_KEY, JSON.stringify(accounts));
}

// Get accounts from localStorage
export function getAccounts() {
  const data = localStorage.getItem(STORAGE_KEY);
  return data ? JSON.parse(data) : [];
}

// Initialize accounts only once
export function initAccounts(accounts) {
  const existing = getAccounts();
  if (!existing || existing.length === 0) {
    saveAccounts(accounts);
    return accounts;
  }
  return existing;
}

// Update balance and add a transaction (only for Accepted txns)
export function updateAccountBalance(accountNumber, amount, txn) {
  let accounts = getAccounts();
  accounts = accounts.map(acc => {
    if (acc.accountNumber === accountNumber) {
      const newBalance = acc.balance + amount;
      return {
        ...acc,
        balance: newBalance,
        transactions: [...(acc.transactions || []), { ...txn, balanceAfter: newBalance }]
      };
    }
    return acc;
  });
  saveAccounts(accounts);
  return accounts;
}

// Add a transaction without changing balance (Pending/Rejected)
export function addTransactionToAccount(accountNumber, txn) {
  let accounts = getAccounts();
  accounts = accounts.map(acc => {
    if (acc.accountNumber === accountNumber) {
      return {
        ...acc,
        transactions: [...(acc.transactions || []), txn]
      };
    }
    return acc;
  });
  saveAccounts(accounts);
  return accounts;
}
```

---

# 🔹 2. `src/common/storage/payrollStore.js`

```javascript
// src/common/storage/payrollStore.js
import { initAccounts, getAccounts, updateAccountBalance, addTransactionToAccount } from "./accountBalanceStore";

const BATCH_KEY = "pi_batches_v2";
const TXN_KEY = "pi_transactions_v2";

export function getAllBatches() {
  const data = localStorage.getItem(BATCH_KEY);
  return data ? JSON.parse(data) : [];
}

export function addBatch(batch) {
  const batches = getAllBatches();
  batches.push(batch);
  localStorage.setItem(BATCH_KEY, JSON.stringify(batches));
}

export function getAllTransactions() {
  const data = localStorage.getItem(TXN_KEY);
  return data ? JSON.parse(data) : [];
}

export function saveTransaction(txn) {
  const txns = getAllTransactions();
  const enriched = {
    ...txn,
    status: txn.status || "Pending"
  };

  // Balance logic
  if (enriched.status === "Accepted") {
    updateAccountBalance(enriched.accountNumber, enriched.amount, enriched);
  } else {
    addTransactionToAccount(enriched.accountNumber, enriched);
  }

  txns.push(enriched);
  localStorage.setItem(TXN_KEY, JSON.stringify(txns));
}

// Accounts
export function getAllAccounts() {
  return getAccounts();
}

export function getAccountByNumber(accNo) {
  const accounts = getAccounts();
  return accounts.find(acc => acc.accountNumber === accNo);
}

// Utility: download text file
export function downloadText(filename, text) {
  const blob = new Blob([text], { type: "text/plain" });
  const url = URL.createObjectURL(blob);
  const link = document.createElement("a");
  link.href = url;
  link.download = filename;
  link.click();
  URL.revokeObjectURL(url);
}

// Seed demo accounts
export function seedDemoAccounts() {
  initAccounts([
    { accountNumber: "1234567890", name: "Savings Account", balance: 5000, currency: "INR", transactions: [] },
    { accountNumber: "9876543210", name: "Current Account", balance: 10000, currency: "INR", transactions: [] }
  ]);
}
```

---

# 🔹 3. `src/common/utils/pdf.js`

```javascript
// src/common/utils/pdf.js

/**
 * Opens a new print window with given HTML content
 * @param {Object} param0 
 * @param {string} param0.title - Title of print page
 * @param {string} param0.html - Inner HTML content
 */
export function openPrintWindow({ title, html }) {
  const win = window.open("", "_blank", "width=800,height=600");
  if (!win) {
    alert("Popup blocked! Please allow popups to print.");
    return;
  }
  win.document.write(`
    <html>
      <head>
        <title>${title}</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
        <style>
          body { font-family: Arial, sans-serif; margin: 20px; }
          .txn-card { border: 1px solid #ccc; padding: 15px; border-radius: 8px; margin-bottom: 20px; }
          h2 { margin-bottom: 20px; }
        </style>
      </head>
      <body>
        <h2>${title}</h2>
        ${html}
      </body>
    </html>
  `);
  win.document.close();
  win.focus();
  win.print();
}
```

---

# 🔹 4. `src/pages/account-balance/AccountBalance.jsx`

```javascript
// src/pages/account-balance/AccountBalance.jsx

import React, { useEffect, useState } from "react";
import { seedDemoAccounts, getAllAccounts, getAllTransactions, downloadText } from "../../common/storage/payrollStore";
import { openPrintWindow } from "../../common/utils/pdf";
import logo from "../../assets/sc-logo.png";

export default function AccountBalance() {
  const [accounts, setAccounts] = useState([]);
  const [selectedAccount, setSelectedAccount] = useState(null);
  const [fromDate, setFromDate] = useState("");
  const [toDate, setToDate] = useState("");
  const [transactions, setTransactions] = useState([]);
  const [selectedTxn, setSelectedTxn] = useState(null);

  useEffect(() => {
    seedDemoAccounts();
    setAccounts(getAllAccounts());
  }, []);

  useEffect(() => {
    if (selectedAccount) {
      const accTxns = selectedAccount.transactions || [];
      const globalTxns = getAllTransactions().filter(txn => txn.accountNumber === selectedAccount.accountNumber);
      let merged = [...accTxns, ...globalTxns];
      if (fromDate) {
        merged = merged.filter(txn => new Date(txn.date) >= new Date(fromDate));
      }
      if (toDate) {
        merged = merged.filter(txn => new Date(txn.date) <= new Date(toDate));
      }
      setTransactions(merged);
    }
  }, [selectedAccount, fromDate, toDate]);

  const handleDownloadStatement = () => {
    if (!selectedAccount) return;
    let csv = "Date,Description,Amount,Balance,Status\n";
    transactions.forEach(txn => {
      csv += `${txn.date},${txn.description},${txn.amount},${txn.balanceAfter},${txn.status}\n`;
    });
    downloadText(`${selectedAccount.accountNumber}_statement.csv`, csv);
  };

  const handlePrintTxn = txn => {
    const html = `
      <div class="txn-card">
        <p><strong>Transaction ID:</strong> ${txn.id || "N/A"}</p>
        <p><strong>Date:</strong> ${txn.date}</p>
        <p><strong>Description:</strong> ${txn.description}</p>
        <p><strong>Amount:</strong> ${txn.amount}</p>
        <p><strong>Balance After:</strong> ${txn.balanceAfter}</p>
        <p><strong>Status:</strong> ${txn.status}</p>
      </div>
    `;
    openPrintWindow({ title: "Transaction Details", html });
  };

  return (
    <div className="container mt-4">
      <div className="d-flex align-items-center mb-4">
        <img src={logo} alt="SC Logo" style={{ height: "40px", marginRight: "10px" }} />
        <h3>Account Balance & Statement</h3>
      </div>

      <div className="mb-3">
        <label className="form-label">Select Account</label>
        <select
          className="form-select"
          onChange={e => {
            const acc = accounts.find(a => a.accountNumber === e.target.value);
            setSelectedAccount(acc);
            setSelectedTxn(null);
          }}
        >
          <option value="">-- Choose --</option>
          {accounts.map(acc => (
            <option key={acc.accountNumber} value={acc.accountNumber}>
              {acc.name} ({acc.accountNumber})
            </option>
          ))}
        </select>
      </div>

      {selectedAccount && (
        <div className="card p-3 mb-3">
          <h5>Account Number: {selectedAccount.accountNumber}</h5>
          <p>Balance: {selectedAccount.balance} {selectedAccount.currency}</p>

          <div className="row mb-3">
            <div className="col">
              <label className="form-label">From</label>
              <input type="date" className="form-control" value={fromDate} onChange={e => setFromDate(e.target.value)} />
            </div>
            <div className="col">
              <label className="form-label">To</label>
              <input type="date" className="form-control" value={toDate} onChange={e => setToDate(e.target.value)} />
            </div>
          </div>

          <button className="btn btn-primary mb-3" onClick={handleDownloadStatement}>
            Download Statement (CSV)
          </button>

          <h6>Transactions</h6>
          <table className="table table-bordered">
            <thead>
              <tr>
                <th>Date</th>
                <th>Description</th>
                <th>Amount</th>
                <th>Balance After</th>
                <th>Status</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {transactions.length === 0 && (
                <tr>
                  <td colSpan="6" className="text-center">No transactions found</td>
                </tr>
              )}
              {transactions.map((txn, idx) => (
                <tr key={idx}>
                  <td>{txn.date}</td>
                  <td>{txn.description}</td>
                  <td>{txn.amount}</td>
                  <td>{txn.balanceAfter}</td>
                  <td>
                    <span
                      className={
                        txn.status === "Accepted"
                          ? "badge bg-success"
                          : txn.status === "Rejected"
                          ? "badge bg-danger"
                          : "badge bg-warning text-dark"
                      }
                    >
                      {txn.status}
                    </span>
                  </td>
                  <td>
                    <button className="btn btn-sm btn-info me-2" onClick={() => setSelectedTxn(txn)}>
                      View
                    </button>
                    <button className="btn btn-sm btn-secondary" onClick={() => handlePrintTxn(txn)}>
                      Print
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>

          {selectedTxn && (
            <div className="card p-3 mt-3">
              <h6>Transaction Details</h6>
              <pre>{JSON.stringify(selectedTxn, null, 2)}</pre>
            </div>
          )}
        </div>
      )}
    </div>
  );
}
```

---

# 🔹 5. `src/pages/transactions/TransactionList.jsx`

```javascript
// src/pages/transactions/TransactionList.jsx

import React, { useEffect, useState } from "react";
import { getAllTransactions } from "../../common/storage/payrollStore";
import { openPrintWindow } from "../../common/utils/pdf";
import logo from "../../assets/sc-logo.png";

export default function TransactionList() {
  const [transactions, setTransactions] = useState([]);
  const [selectedTxn, setSelectedTxn] = useState(null);

  // Pagination states
  const [currentPage, setCurrentPage] = useState(1);
  const pageSize = 5;

  // Search state
  const [searchTerm, setSearchTerm] = useState("");

  useEffect(() => {
    setTransactions(getAllTransactions());
  }, []);

  const handlePrintTxn = txn => {
    const html = `
      <div class="txn-card">
        <p><strong>Transaction ID:</strong> ${txn.id || "N/A"}</p>
        <p><strong>Account Number:</strong> ${txn.accountNumber}</p>
        <p><strong>Date:</strong> ${txn.date}</p>
        <p><strong>Description:</strong> ${txn.description}</p>
        <p><strong>Amount:</strong> ${txn.amount}</p>
        <p><strong>Balance After:</strong> ${txn.balanceAfter}</p>
        <p><strong>Status:</strong> ${txn.status}</p>
      </div>
    `;
    openPrintWindow({ title: "Transaction Details", html });
  };

  // Search filter
  const filteredTxns = transactions.filter(txn =>
    txn.accountNumber.toString().includes(searchTerm) ||
    txn.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
    (txn.status && txn.status.toLowerCase().includes(searchTerm.toLowerCase()))
  );

  const totalPages = Math.ceil(filteredTxns.length / pageSize);
  const paginatedTxns = filteredTxns.slice(
    (currentPage - 1) * pageSize,
    currentPage * pageSize
  );

  return (
    <div className="container mt-4">
      <div className="d-flex align-items-center mb-4">
        <img src={logo} alt="SC Logo" style={{ height: "40px", marginRight: "10px" }} />
        <h3>All Transactions</h3>
      </div>

      {/* Search bar */}
      <div className="mb-3">
        <input
          type="text"
          className="form-control"
          placeholder="Search by account number, description, or status..."
          value={searchTerm}
          onChange={e => {
            setSearchTerm(e.target.value);
            setCurrentPage(1);
          }}
        />
      </div>

      <table className="table table-striped table-bordered">
        <thead>
          <tr>
            <th>Date</th>
            <th>Account</th>
            <th>Description</th>
            <th>Amount</th>
            <th>Balance After</th>
            <th>Status</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {paginatedTxns.length === 0 && (
            <tr>
              <td colSpan="7" className="text-center">No transactions found</td>
            </tr>
          )}
          {paginatedTxns.map((txn, idx) => (
            <tr key={idx}>
              <td>{txn.date}</td>
              <td>{txn.accountNumber}</td>
              <td>{txn.description}</td>
              <td>{txn.amount}</td>
              <td>{txn.balanceAfter}</td>
              <td>
                <span
                  className={
                    txn.status === "Accepted"
                      ? "badge bg-success"
                      : txn.status === "Rejected"
                      ? "badge bg-danger"
                      : "badge bg-warning text-dark"
                  }
                >
                  {txn.status}
                </span>
              </td>
              <td>
                <button className="btn btn-sm btn-info me-2" onClick={() => setSelectedTxn(txn)}>
                  View
                </button>
                <button className="btn btn-sm btn-secondary" onClick={() => handlePrintTxn(txn)}>
                  Print
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {/* Pagination Controls */}
      {filteredTxns.length > pageSize && (
        <div className="d-flex justify-content-between align-items-center mt-3">
          <button
            className="btn btn-outline-primary btn-sm"
            disabled={currentPage === 1}
            onClick={() => setCurrentPage(p => p - 1)}
          >
            Previous
          </button>

          <span>Page {currentPage} of {totalPages}</span>

          <button
            className="btn btn-outline-primary btn-sm"
            disabled={currentPage === totalPages}
            onClick={() => setCurrentPage(p => p + 1)}
          >
            Next
          </button>
        </div>
      )}

      {selectedTxn && (
        <div className="card p-3 mt-3">
          <h6>Transaction Details</h6>
          <pre>{JSON.stringify(selectedTxn, null, 2)}</pre>
        </div>
      )}
    </div>
  );
}
```

---

✅ With these 5 files you now fully cover **User Story 6 & 7**:

* Account balance updated only for **Accepted** txns.
* Transactions list with **pagination + search + status**.
* Print/HTML preview working.
* CSV statement download from Account Balance page.

---

Would you like me to also prepare a **demo seed set of transactions** (some Accepted, some Pending, some Rejected) so that when you load the app, you immediately see test data?



