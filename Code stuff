Got it — you’re starting from a **CRA (Create React App) starter** template.

To turn this into the **full multi-developer Payment Initiations project**, we’ll:

1. Replace the default CRA `src` folder with the one containing

   * `/common` (global styles, mock data, shared components)
   * `/pages` (one folder per developer)
   * Updated `App.js` for routing
2. Keep `public/index.html` from CRA (it’s already fine).
3. Install `react-router-dom`, `bootstrap`, and `sass`.

---

### **Step 1 — Install extra dependencies**

In your project root:

```bash
npm install react-router-dom bootstrap sass
```

---

### **Step 2 — Replace `src` folder structure**

Inside `src/`, delete:

```
App.css
App.js
App.test.js
index.css
logo.svg
reportWebVitals.js
setupTests.js
```

Keep only:

```
index.js
```

Then add:

```
src/
 ├─ App.js                # Our main app with routing
 ├─ common/
 │   ├─ styles.scss
 │   ├─ constants.js
 │   ├─ mockData.js
 │   └─ components/
 │       ├─ Header.jsx
 │       ├─ Footer.jsx
 │       ├─ PrimaryButton.jsx
 │       ├─ FormInput.jsx
 │       ├─ DataTable.jsx
 │       └─ ConfirmModal.jsx
 └─ pages/
     ├─ login/Login.jsx
     ├─ payroll/PayrollPayment.jsx
     ├─ excel-input/ExcelInput.jsx
     ├─ transaction-list/TransactionList.jsx
     ├─ approval/Approval.jsx
     ├─ print-preview/PrintPreview.jsx
     └─ account-balance/AccountBalance.jsx
```

---

### **Step 3 — Update `index.js`**

Replace with:

```jsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import App from './App';
import './common/styles.scss';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <BrowserRouter>
    <App />
  </BrowserRouter>
);
```

---

### **Step 4 — Add `App.js`**

(This will have the routing and side menu from my earlier code.)

```jsx
import React from 'react';
import { Routes, Route, NavLink } from 'react-router-dom';
import Header from './common/components/Header';
import Footer from './common/components/Footer';
import Login from './pages/login/Login';
import PayrollPayment from './pages/payroll/PayrollPayment';
import ExcelInput from './pages/excel-input/ExcelInput';
import TransactionList from './pages/transaction-list/TransactionList';
import Approval from './pages/approval/Approval';
import AccountBalance from './pages/account-balance/AccountBalance';
import PrintPreview from './pages/print-preview/PrintPreview';

export default function App() {
  return (
    <div className="app d-flex flex-column min-vh-100">
      <Header />
      <div className="container-fluid py-3 flex-grow-1">
        <div className="row">
          <aside className="col-12 col-md-2 mb-3 mb-md-0">
            <nav className="list-group shadow-sm">
              {[
                ['Login','/'],
                ['Create PAY','/payroll'],
                ['Excel Input','/excel'],
                ['Transactions','/txns'],
                ['Approvals','/approvals'],
                ['Balances','/balances'],
                ['Print Preview','/print']
              ].map(([label, to]) => (
                <NavLink key={to} to={to} end className={({isActive}) =>
                  'list-group-item list-group-item-action' + (isActive?' active':'')
                }>{label}</NavLink>
              ))}
            </nav>
          </aside>
          <main className="col-12 col-md-10">
            <Routes>
              <Route path="/" element={<Login />} />
              <Route path="/payroll" element={<PayrollPayment />} />
              <Route path="/excel" element={<ExcelInput />} />
              <Route path="/txns" element={<TransactionList />} />
              <Route path="/approvals" element={<Approval />} />
              <Route path="/balances" element={<AccountBalance />} />
              <Route path="/print" element={<PrintPreview />} />
            </Routes>
          </main>
        </div>
      </div>
      <Footer />
    </div>
  );
}
```

---

I can now give you **all remaining files** (`/common` + `/pages`) so your CRA starter becomes the **multi-developer setup** in one go.

Do you want me to paste those next? That will make your project fully plug-and-play.


Alright — here’s the **full `/common` and `/pages` code** for your CRA starter, so you and your team can drop it in and be ready to go.

---

## **`src/common/styles.scss`**

```scss
@import "bootstrap/scss/bootstrap";

:root {
  --brand-primary: #0050b3;
  --brand-accent: #21a675;
}

body {
  background-color: #f7f9fb;
}

.app .list-group-item.active {
  background-color: var(--brand-primary);
  border-color: var(--brand-primary);
}

.btn-primary {
  background-color: var(--brand-primary);
  border-color: var(--brand-primary);
}

.brand-gradient {
  background: linear-gradient(90deg, var(--brand-primary), var(--brand-accent));
  color: #fff;
}

.card-shadow {
  box-shadow: 0 0.5rem 1rem rgba(0,0,0,.08);
}
```

---

## **`src/common/constants.js`**

```js
export const currencies = ['INR', 'USD', 'EUR', 'GBP', 'SGD'];
```

---

## **`src/common/mockData.js`**

```js
export const accounts = [
  { id: 'ACC001', name: 'Corporate INR A/C', currency: 'INR', balance: 1245500.55 },
  { id: 'ACC002', name: 'Corporate USD A/C', currency: 'USD', balance: 245000.10 },
];

export const transactions = [
  { id: 'TX1001', date: '2025-08-01', type: 'PAY', employeeId: 'E102', currency: 'INR', amount: 45000, status: 'Draft' },
  { id: 'TX1002', date: '2025-08-02', type: 'PAY', employeeId: 'E103', currency: 'USD', amount: 800, status: 'Pending Approval' },
  { id: 'TX1003', date: '2025-08-05', type: 'PAY', employeeId: 'E104', currency: 'INR', amount: 61000, status: 'Approved' },
];

export const approvals = transactions.filter(t => t.status === 'Pending Approval');
```

---

## **`src/common/components/Header.jsx`**

```jsx
import React from 'react';

export default function Header() {
  return (
    <header className="brand-gradient py-2 px-3">
      <div className="d-flex align-items-center justify-content-between container-fluid">
        <h1 className="h5 mb-0">Payment Initiations</h1>
        <div className="d-flex gap-3 small">
          <span>Help</span>
          <span>Profile</span>
        </div>
      </div>
    </header>
  );
}
```

---

## **`src/common/components/Footer.jsx`**

```jsx
import React from 'react';

export default function Footer() {
  return (
    <footer className="bg-light border-top py-2 small text-center">
      © 2025 Your Bank • For demo use only
    </footer>
  );
}
```

---

## **`src/common/components/PrimaryButton.jsx`**

```jsx
import React from 'react';
export default function PrimaryButton({ children, ...props }) {
  return <button className="btn btn-primary" {...props}>{children}</button>;
}
```

---

## **`src/common/components/FormInput.jsx`**

```jsx
import React from 'react';
export default function FormInput({ label, type='text', value, onChange, required, ...rest }) {
  return (
    <div className="mb-3">
      <label className="form-label">{label}{required && ' *'}</label>
      <input
        className="form-control"
        type={type}
        value={value}
        onChange={e=>onChange(e.target.value)}
        required={required}
        {...rest}
      />
    </div>
  );
}
```

---

## **`src/common/components/DataTable.jsx`**

```jsx
import React from 'react';

export default function DataTable({ columns, rows, actions }) {
  return (
    <div className="table-responsive card card-shadow">
      <table className="table table-sm table-hover mb-0">
        <thead className="table-light">
          <tr>
            {columns.map(c => <th key={c.key}>{c.header}</th>)}
            {actions && <th>Actions</th>}
          </tr>
        </thead>
        <tbody>
          {rows.map((r, idx) => (
            <tr key={r.id || idx}>
              {columns.map(c => <td key={c.key}>{c.render ? c.render(r[c.key], r) : r[c.key]}</td>)}
              {actions && <td>{actions(r)}</td>}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}
```

---

## **`src/common/components/ConfirmModal.jsx`**

```jsx
import React from 'react';

export default function ConfirmModal({ id, title, body, onConfirm }) {
  return (
    <div className="modal fade" id={id} tabIndex="-1">
      <div className="modal-dialog modal-dialog-centered">
        <div className="modal-content">
          <div className="modal-header"><h5 className="modal-title">{title}</h5>
            <button type="button" className="btn-close" data-bs-dismiss="modal"></button>
          </div>
          <div className="modal-body">{body}</div>
          <div className="modal-footer">
            <button className="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
            <button className="btn btn-primary" data-bs-dismiss="modal" onClick={onConfirm}>Confirm</button>
          </div>
        </div>
      </div>
    </div>
  );
}
```

---

This covers **Part 1 — `/common` folder**.
Next, I’ll paste **Part 2 — `/pages` folder**, where each developer gets their own working page. That’s where all the mock UI for Login, Payroll Payment, Excel Input, Transactions, Approvals, Print Preview, and Account Balance will go.

Do you want me to paste **Part 2 now** so your CRA setup is fully ready?

Alright — here’s **Part 2** with all `/pages` code for each developer.
Just create these folders inside `src/pages/` and paste the files.

---

## **`src/pages/login/Login.jsx`**  *(Dev 1)*

```jsx
import React, { useState } from 'react';
import PrimaryButton from '../../common/components/PrimaryButton';
import FormInput from '../../common/components/FormInput';

export default function Login() {
  const [user, setUser] = useState('');
  const [pwd, setPwd] = useState('');
  const [attempts, setAttempts] = useState(0);
  const disabled = !user || !pwd || attempts >= 3;

  const submit = (e) => {
    e.preventDefault();
    setAttempts(a => a + 1); // mock fail to show UI
  };

  return (
    <div className="card card-shadow p-4">
      <h2 className="h5 mb-3">Login</h2>
      {attempts > 0 && attempts < 3 && (
        <div className="alert alert-danger">Invalid credentials (mock). Attempts: {attempts}/3</div>
      )}
      {attempts >= 3 && (
        <div className="alert alert-warning">Account locked after 3 failed attempts (mock).</div>
      )}
      <form onSubmit={submit}>
        <FormInput label="Username" value={user} onChange={setUser} required />
        <FormInput label="Password" type="password" value={pwd} onChange={setPwd} required />
        <PrimaryButton disabled={disabled} type="submit">Sign in</PrimaryButton>
      </form>
    </div>
  );
}
```

---

## **`src/pages/payroll/PayrollPayment.jsx`**  *(Dev 2)*

```jsx
import React, { useState } from 'react';
import { accounts } from '../../common/mockData';
import { currencies } from '../../common/constants';
import PrimaryButton from '../../common/components/PrimaryButton';
import FormInput from '../../common/components/FormInput';

export default function PayrollPayment() {
  const [form, setForm] = useState({
    accountId: accounts[0].id, employeeId: '', amount: '', currency: 'INR', date: ''
  });
  const update = (k,v)=>setForm(f=>({...f,[k]:v}));

  const saveDraft = ()=> alert('Saved as Draft (mock): ' + JSON.stringify(form,null,2));
  const submit = ()=> alert('Submitted (mock): ' + JSON.stringify(form,null,2));

  return (
    <div className="card card-shadow p-4">
      <h2 className="h5">Create PAY (Payroll)</h2>
      <div className="row">
        <div className="col-md-6">
          <div className="mb-3">
            <label className="form-label">From Account *</label>
            <select className="form-select" value={form.accountId} onChange={e=>update('accountId', e.target.value)}>
              {accounts.map(a => <option key={a.id} value={a.id}>{a.name} ({a.currency})</option>)}
            </select>
          </div>
          <FormInput label="Employee ID" value={form.employeeId} onChange={v=>update('employeeId',v)} required />
          <FormInput label="Amount" type="number" value={form.amount} onChange={v=>update('amount',v)} required />
          <div className="mb-3">
            <label className="form-label">Currency *</label>
            <select className="form-select" value={form.currency} onChange={e=>update('currency', e.target.value)}>
              {currencies.map(c => <option key={c}>{c}</option>)}
            </select>
          </div>
          <FormInput label="Payment Date" type="date" value={form.date} onChange={v=>update('date',v)} required />
        </div>
      </div>
      <div className="d-flex gap-2">
        <button className="btn btn-outline-secondary" onClick={saveDraft}>Save as Draft</button>
        <PrimaryButton onClick={submit}>Submit</PrimaryButton>
      </div>
    </div>
  );
}
```

---

## **`src/pages/excel-input/ExcelInput.jsx`**  *(Dev 3)*

```jsx
import React, { useState } from 'react';

export default function ExcelInput() {
  const [rows, setRows] = useState([{ employeeId:'', amount:'', currency:'INR' }]);

  const addRow = ()=> setRows(r => [...r, { employeeId:'', amount:'', currency:'INR' }]);
  const removeRow = (i)=> setRows(r => r.filter((_,idx)=>idx!==i));
  const update = (i,k,v)=> setRows(r => r.map((row,idx)=> idx===i? {...row,[k]:v}:row));

  const pasteMock = ()=>{
    setRows([
      { employeeId:'E101', amount:'55000', currency:'INR' },
      { employeeId:'E102', amount:'61000', currency:'INR' }
    ]);
  };

  return (
    <div className="card card-shadow p-3">
      <h2 className="h5">Excel-style Transaction Entry</h2>
      <div className="table-responsive">
        <table className="table table-bordered table-sm align-middle">
          <thead className="table-light">
            <tr><th>Employee ID</th><th>Amount</th><th>Currency</th><th style={{width:100}}>Action</th></tr>
          </thead>
          <tbody>
            {rows.map((r,i)=>(
              <tr key={i}>
                <td><input className="form-control form-control-sm" value={r.employeeId} onChange={e=>update(i,'employeeId',e.target.value)}/></td>
                <td><input className="form-control form-control-sm" type="number" value={r.amount} onChange={e=>update(i,'amount',e.target.value)}/></td>
                <td>
                  <select className="form-select form-select-sm" value={r.currency} onChange={e=>update(i,'currency',e.target.value)}>
                    <option>INR</option><option>USD</option><option>EUR</option>
                  </select>
                </td>
                <td><button className="btn btn-outline-danger btn-sm" onClick={()=>removeRow(i)}>Remove</button></td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      <div className="d-flex gap-2">
        <button className="btn btn-outline-secondary" onClick={addRow}>Add row</button>
        <button className="btn btn-outline-secondary" onClick={pasteMock}>Paste mock</button>
        <button className="btn btn-primary" onClick={()=>alert('Saved draft (mock)')}>Save as Draft</button>
      </div>
    </div>
  );
}
```

---

## **`src/pages/transaction-list/TransactionList.jsx`**  *(Dev 4)*

```jsx
import React, { useMemo, useState } from 'react';
import { transactions } from '../../common/mockData';
import DataTable from '../../common/components/DataTable';

export default function TransactionList() {
  const [status, setStatus] = useState('All');
  const rows = useMemo(()=> status==='All' ? transactions : transactions.filter(t=>t.status===status), [status]);
  const columns = [
    { key:'id', header:'ID' },
    { key:'date', header:'Date' },
    { key:'type', header:'Type' },
    { key:'employeeId', header:'Employee' },
    { key:'currency', header:'CCY' },
    { key:'amount', header:'Amount' },
    { key:'status', header:'Status' }
  ];

  return (
    <div className="d-grid gap-3">
      <div className="card card-shadow p-3">
        <div className="d-flex justify-content-between align-items-center">
          <h2 className="h5 mb-0">Transactions</h2>
          <div className="d-flex gap-2">
            <select className="form-select form-select-sm" value={status} onChange={e=>setStatus(e.target.value)}>
              {['All','Draft','Pending Approval','Approved'].map(s=><option key={s}>{s}</option>)}
            </select>
          </div>
        </div>
      </div>
      <DataTable
        columns={columns}
        rows={rows}
        actions={(r)=>(
          <>
            <button className="btn btn-sm btn-outline-primary me-2" onClick={()=>alert('View ' + r.id)}>View</button>
            <button className="btn btn-sm btn-outline-secondary me-2" onClick={()=>alert('Edit ' + r.id)}>Edit</button>
            <button className="btn btn-sm btn-outline-danger" onClick={()=>alert('Delete (mock) ' + r.id)}>Delete</button>
          </>
        )}
      />
    </div>
  );
}
```



---
Alright — here are the last three developer pages so your `/pages` folder is complete.

---

## **`src/pages/approval/Approval.jsx`** *(Dev 5)*

```jsx
import React, { useState } from 'react';
import { approvals } from '../../common/mockData';
import DataTable from '../../common/components/DataTable';
import ConfirmModal from '../../common/components/ConfirmModal';

export default function Approval() {
  const [list, setList] = useState(approvals);

  const act = (id, action) => {
    setList(l => l.filter(x => x.id !== id));
    alert(`${action} ${id} (mock)`);
  };

  const columns = [
    { key:'id', header:'ID' },
    { key:'date', header:'Date' },
    { key:'employeeId', header:'Employee' },
    { key:'currency', header:'CCY' },
    { key:'amount', header:'Amount' }
  ];

  return (
    <div className="d-grid gap-3">
      <h2 className="h5">Pending Approvals</h2>
      <DataTable
        columns={columns}
        rows={list}
        actions={(r)=>(
          <>
            <button
              className="btn btn-sm btn-outline-success me-2"
              data-bs-toggle="modal"
              data-bs-target="#approve"
              onClick={()=>window.__approve_id=r.id}
            >Approve</button>
            <button
              className="btn btn-sm btn-outline-danger"
              data-bs-toggle="modal"
              data-bs-target="#reject"
              onClick={()=>window.__reject_id=r.id}
            >Reject</button>
          </>
        )}
      />
      <ConfirmModal id="approve" title="Approve payment"
        body="Are you sure you want to approve?"
        onConfirm={()=>act(window.__approve_id,'Approved')} />
      <ConfirmModal id="reject" title="Reject payment"
        body="Are you sure you want to reject?"
        onConfirm={()=>act(window.__reject_id,'Rejected')} />
    </div>
  );
}
```

---

## **`src/pages/print-preview/PrintPreview.jsx`** *(Dev 3 or shared)*

```jsx
import React from 'react';
import { transactions } from '../../common/mockData';

export default function PrintPreview() {
  const t = transactions[0]; // mock first transaction
  return (
    <div className="card card-shadow p-4">
      <h2 className="h5">Transaction Print Preview</h2>
      <div className="border p-3 bg-white">
        <h3 className="h6">Transaction #{t.id}</h3>
        <hr/>
        <p><strong>Date:</strong> {t.date}</p>
        <p><strong>Employee:</strong> {t.employeeId}</p>
        <p><strong>Amount:</strong> {t.currency} {t.amount}</p>
        <p><strong>Status:</strong> {t.status}</p>
      </div>
      <button className="btn btn-outline-primary mt-3" onClick={()=>window.print()}>Print</button>
    </div>
  );
}
```

---

## **`src/pages/account-balance/AccountBalance.jsx`** *(Dev 6)*

```jsx
import React, { useState } from 'react';
import { accounts } from '../../common/mockData';

export default function AccountBalance() {
  const [selected, setSelected] = useState(accounts[0].id);
  const [from, setFrom] = useState('');
  const [to, setTo] = useState('');

  const acc = accounts.find(a=>a.id===selected);

  return (
    <div className="d-grid gap-3">
      <div className="row g-3">
        {accounts.map(a=>(
          <div className="col-md-4" key={a.id}>
            <div className="card card-shadow p-3">
              <div className="d-flex justify-content-between">
                <strong>{a.name}</strong>
                <span className="badge bg-secondary">{a.currency}</span>
              </div>
              <div className="display-6">{a.currency} {a.balance.toLocaleString()}</div>
              <button
                className="btn btn-sm btn-outline-primary mt-2"
                onClick={()=>setSelected(a.id)}
              >
                View Statement
              </button>
            </div>
          </div>
        ))}
      </div>

      <div className="card card-shadow p-3">
        <h2 className="h6 mb-3">Statement (mock) — {acc.name}</h2>
        <div className="row g-2">
          <div className="col-auto">
            <input type="date" className="form-control" value={from} onChange={e=>setFrom(e.target.value)} />
          </div>
          <div className="col-auto">
            <input type="date" className="form-control" value={to} onChange={e=>setTo(e.target.value)} />
          </div>
          <div className="col-auto">
            <button className="btn btn-outline-secondary" onClick={()=>alert('Fetch mock statement')}>Fetch</button>
          </div>
          <div className="col-auto">
            <button className="btn btn-primary" onClick={()=>alert('Download mock PDF')}>Download</button>
          </div>
        </div>
      </div>
    </div>
  );
}
```

---

✅ Now your CRA starter will have:

* `/common` folder (shared styles, mock data, components)
* `/pages` folder (1 per developer + print preview)
* `App.js` with routing and sidebar
* Bootstrap and SCSS integration

---

If you want, I can also give you a **ready-to-run Git branch setup** for Azure Repos so each developer starts in their own branch with their assigned page.
Do you want me to prepare that branching plan?


If you want, I can now paste **Approval.jsx, PrintPreview\.jsx, and AccountBalance.jsx** so all six developer pages are complete.
Do you want me to paste those remaining three now?

