Perfect üëç let‚Äôs update your PayrollPayment.jsx with the Download Template + Upload Excel workflow.
I‚Äôll also show you where to place files in your project folder structure.


---

üìÇ Updated Project Folder (relevant parts)

src/
‚îú‚îÄ‚îÄ pages/
‚îÇ   ‚îú‚îÄ‚îÄ payroll/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ PayrollPayment.jsx   <-- updated with download + upload
public/
‚îî‚îÄ‚îÄ templates/
    ‚îî‚îÄ‚îÄ sample_payroll_upload.xlsx   <-- static template for download

‚ö° Place the Excel template inside public/templates/ so React can serve it directly.


---

üìÑ src/pages/payroll/PayrollPayment.jsx

import React, { useState, useEffect } from "react";
import * as XLSX from "xlsx";
import { accounts } from "../../common/mockData";
import { currencies } from "../../common/constants";
import PrimaryButton from "../../common/components/PrimaryButton";
import BackToDashboard from "../../common/components/BackToDashboard";
import { useNavigate, useLocation } from "react-router-dom";
import { getBatchById, upsertBatch } from "../../common/storage/payrollStore";

export default function PayrollPayment() {
  const navigate = useNavigate();
  const location = useLocation();
  const [editBatchId, setEditBatchId] = useState(null);

  const [instruction, setInstruction] = useState({
    paymentCurrency: "",
    debitAccount: "",
    date: "",
  });

  const emptyPayment = {
    payeeDetails: "",
    payeeName: "",
    accountNumber: "",
    reference: `REF-${Date.now()}`, // Auto-generated
    amount: "",
  };

  const [payments, setPayments] = useState([emptyPayment]);

  // Load existing batch when editing
  useEffect(() => {
    if (location.state && location.state.batchId) {
      const batch = getBatchById(location.state.batchId);
      if (batch) {
        setEditBatchId(batch.id);
        setInstruction(batch.instruction);
        setPayments(batch.payments);
      }
    }
  }, [location.state]);

  const onInstruction = (e) => {
    const { name, value } = e.target;
    setInstruction((p) => ({ ...p, [name]: value }));
  };

  const onPayment = (row, e) => {
    const { name, value } = e.target;
    setPayments((prev) => {
      const next = [...prev];
      next[row][name] = value;
      return next;
    });
  };

  const addRow = () =>
    setPayments((prev) => [
      ...prev,
      { ...emptyPayment, reference: `REF-${Date.now()}` },
    ]);

  const removeRow = (index) =>
    setPayments((prev) => prev.filter((_, i) => i !== index));

  const persist = (status) => {
    const batch = {
      id: editBatchId || Date.now(),
      instruction,
      payments,
      status,
      createdAt: editBatchId ? undefined : new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    };
    upsertBatch(batch);
  };

  const saveDraft = () => {
    persist("Draft");
    navigate("/manage-payroll");
  };

  const submit = (e) => {
    e.preventDefault();
    persist("Submitted");
    navigate("/manage-payroll");
  };

  // ====== Excel Upload Handler ======
  const handleExcelUpload = (e) => {
    const file = e.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (evt) => {
      const bstr = evt.target.result;
      const wb = XLSX.read(bstr, { type: "binary" });
      const wsname = wb.SheetNames[0];
      const ws = wb.Sheets[wsname];
      const data = XLSX.utils.sheet_to_json(ws);

      const newPayments = data.map((row) => ({
        payeeDetails: row["Payee Role"] || "",
        payeeName: row["Payee Name"] || "",
        accountNumber: row["Account Number"] || "",
        amount: row["Amount"] || "",
        reference: `REF-${Date.now()}-${Math.floor(Math.random() * 1000)}`,
      }));

      setPayments((prev) => [...prev, ...newPayments]);
    };
    reader.readAsBinaryString(file);
  };

  return (
    <div className="container my-4">
      <div className="card card-shadow p-4">
        <h2 className="mb-4 text-center brand-gradient p-2 rounded">
          {editBatchId ? "Edit Payroll Batch" : "Create Payroll Payments"}
        </h2>

        <form onSubmit={submit}>
          {/* Instruction Details */}
          <h4 className="mb-3">Instruction Details</h4>
          <div className="row g-3" style={{ alignItems: "end" }}>
            <div className="col-12 col-md-4">
              <label className="form-label fw-semibold">
                Select Currency <span className="text-danger">*</span>
              </label>
              <select
                className="form-select form-select-sm"
                name="paymentCurrency"
                value={instruction.paymentCurrency}
                onChange={onInstruction}
                required
              >
                <option value="">Select Currency</option>
                {currencies.map((c) => (
                  <option key={c} value={c}>
                    {c}
                  </option>
                ))}
              </select>
            </div>
            <div className="col-12 col-md-4">
              <label className="form-label fw-semibold">
                Select Debit Account <span className="text-danger">*</span>
              </label>
              <select
                className="form-select form-select-sm"
                name="debitAccount"
                value={instruction.debitAccount}
                onChange={onInstruction}
                required
              >
                <option value="">Select Debit Account</option>
                {accounts.map((a) => (
                  <option key={a.id} value={a.number}>
                    {a.number} ‚Äî {a.name}
                  </option>
                ))}
              </select>
            </div>
            <div className="col-12 col-md-4">
              <label className="form-label fw-semibold">
                Date <span className="text-danger">*</span>
              </label>
              <input
                className="form-control form-control-sm"
                type="date"
                name="date"
                value={instruction.date}
                onChange={onInstruction}
                required
              />
            </div>
          </div>

          {/* Payment Details */}
          <h4 className="mt-4 mb-3 d-flex justify-content-between align-items-center">
            <span>Payment Details</span>
            <div className="d-flex gap-2">
              {/* Download Template */}
              <a
                href="/templates/sample_payroll_upload.xlsx"
                download="payroll_template.xlsx"
                className="btn btn-sm btn-outline-primary"
              >
                ‚¨áÔ∏è Download Template
              </a>

              {/* Excel Upload Button */}
              <label className="btn btn-sm btn-outline-success mb-0">
                üìÇ Upload Excel
                <input
                  type="file"
                  accept=".xlsx, .xls"
                  hidden
                  onChange={handleExcelUpload}
                />
              </label>
            </div>
          </h4>

          <div className="table-responsive">
            <table className="table table-bordered align-middle text-center mb-2">
              <thead className="table-light">
                <tr>
                  <th>Reference</th>
                  <th>Payee Role</th>
                  <th>Payee Name</th>
                  <th>Account Number</th>
                  <th>Amount</th>
                  <th>Action</th>
                </tr>
              </thead>
              <tbody>
                {payments.map((p, i) => (
                  <tr key={i}>
                    <td>
                      <input
                        className="form-control form-control-sm"
                        name="reference"
                        value={p.reference}
                        readOnly
                      />
                    </td>
                    <td>
                      <input
                        className="form-control form-control-sm"
                        name="payeeDetails"
                        value={p.payeeDetails}
                        onChange={(e) => onPayment(i, e)}
                        required
                      />
                    </td>
                    <td>
                      <input
                        className="form-control form-control-sm"
                        name="payeeName"
                        value={p.payeeName}
                        onChange={(e) => onPayment(i, e)}
                        required
                      />
                    </td>
                    <td>
                      <input
                        className="form-control form-control-sm"
                        name="accountNumber"
                        value={p.accountNumber}
                        onChange={(e) => onPayment(i, e)}
                        required
                      />
                    </td>
                    <td>
                      <input
                        className="form-control form-control-sm"
                        type="number"
                        name="amount"
                        value={p.amount}
                        onChange={(e) => onPayment(i, e)}
                        required
                      />
                    </td>
                    <td>
                      <button
                        type="button"
                        className="btn btn-sm btn-danger"
                        onClick={() => removeRow(i)}
                      >
                        Remove
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          <button
            type="button"
            className="btn btn-outline-secondary mb-4"
            onClick={addRow}
          >
            + Add Payment Row
          </button>

          {/* Actions */}
          <div className="d-flex justify-content-between align-items-center">
            <BackToDashboard />
            <div className="d-flex gap-2">
              <button
                type="button"
                className="btn btn-outline-secondary"
                onClick={saveDraft}
              >
                Save as Draft
              </button>
              <PrimaryButton type="submit">Submit</PrimaryButton>
            </div>
          </div>
        </form>
      </div>
    </div>
  );
}


---

‚úÖ With this update:

Users download the Excel template from /templates/sample_payroll_upload.xlsx.

They fill details.

They upload back ‚Üí table auto-fills with rows.



---

Do you also want me to provide a ready-to-go /templates/sample_payroll_upload.xlsx that your team can drop into public/ directly?

Perfect üëç here‚Äôs your ready-to-use Excel template for payroll upload.



---

üîπ How to Use in Your Project

1. Create a folder inside your project root:



public/templates/

2. Place the file inside it:



public/templates/sample_payroll_upload.xlsx

3. When running your React app, users will be able to download it directly from:



http://localhost:3000/templates/sample_payroll_upload.xlsx

(or your deployed domain later).


---

‚ö° This ensures your Download Template button in PayrollPayment.jsx works immediately.

üëâ Do you also want me to add a small preview screenshot of the template columns in your Payroll page so users know what they‚Äôre filling even before downloading?

