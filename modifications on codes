CREATE PAYMENT PAGE

import React, { useState } from "react";
import { accounts } from "../../common/mockData";
import { currencies } from "../../common/constants";
import PrimaryButton from "../../common/components/PrimaryButton";
import BackToDashboard from "../../common/components/BackToDashboard";

export default function PayrollPayment() {
  // ---------------- State ----------------
  const [instruction, setInstruction] = useState({
    paymentType: "Domestic",
    paymentCurrency: "",
    debitAccount: "",
    date: "",
  });

  const emptyPayment = {
    paymentMethod: "",
    payeeDetails: "",
    payeeName: "",
    bankDetails: "",
    yourReference: "",
    paymentReference: "",
    amount: "",
  };

  const [payments, setPayments] = useState([emptyPayment]);

  // -------------- Handlers ---------------
  const onInstruction = (e) => {
    const { name, value } = e.target;
    setInstruction((p) => ({ ...p, [name]: value }));
  };

  const onPayment = (row, e) => {
    const { name, value } = e.target;
    setPayments((prev) => {
      const next = [...prev];
      next[row][name] = value;
      return next;
    });
  };

  const addRow = () => setPayments((prev) => [...prev, { ...emptyPayment }]);

  const saveDraft = () => {
    console.log("Draft:", { instruction, payments });
    alert("Draft saved (mock)");
  };

  const submit = (e) => {
    e.preventDefault();
    console.log("Submit:", { instruction, payments });
    alert("Form submitted (mock)");
  };

  // -------------- Render -----------------
  return (
    <div className="container my-4">
      <div className="card card-shadow p-4">
        <h2 className="mb-4 text-center brand-gradient p-2 rounded">
          Payroll Payments
        </h2>

        <form onSubmit={submit}>
          {/* ============ Instruction Details ============ */}
          <h4 className="mb-3">Instruction Details</h4>

          {/* 2-column grid, perfectly aligned */}
          <div
            className="row g-3"
            style={{
              // keep every control the same height/feel
              alignItems: "end",
            }}
          >
            <div className="col-12 col-md-6">
              <label className="form-label fw-semibold">Payment Type</label>
              <input
                className="form-control"
                name="paymentType"
                value={instruction.paymentType}
                onChange={onInstruction}
                placeholder="Payment Type"
              />
            </div>

            <div className="col-12 col-md-6">
              <label className="form-label fw-semibold">
                Select Currency <span className="text-danger">*</span>
              </label>
              <select
                className="form-select"
                name="paymentCurrency"
                value={instruction.paymentCurrency}
                onChange={onInstruction}
                required
              >
                <option value="">Select Currency</option>
                {currencies.map((c) => (
                  <option key={c} value={c}>
                    {c}
                  </option>
                ))}
              </select>
            </div>

            <div className="col-12 col-md-6">
              <label className="form-label fw-semibold">Select Debit Account</label>
              <select
                className="form-select"
                name="debitAccount"
                value={instruction.debitAccount}
                onChange={onInstruction}
              >
                <option value="">Select Debit Account</option>
                {accounts.map((a) => (
                  <option key={a.id} value={a.number}>
                    {a.number} — {a.name}
                  </option>
                ))}
              </select>
            </div>

            <div className="col-12 col-md-6">
              <label className="form-label fw-semibold">
                Date <span className="text-danger">*</span>
              </label>
              <input
                className="form-control"
                type="date"
                name="date"
                value={instruction.date}
                onChange={onInstruction}
                required
              />
            </div>
          </div>

          {/* ============ Payment Details ============ */}
          <h4 className="mt-4 mb-3">Payment Details</h4>

          <div className="table-responsive">
            <table className="table table-bordered align-middle text-center mb-2">
              <colgroup>
                <col style={{ width: "14%" }} />
                <col style={{ width: "18%" }} />
                <col style={{ width: "16%" }} />
                <col style={{ width: "18%" }} />
                <col style={{ width: "14%" }} />
                <col style={{ width: "14%" }} />
                <col style={{ width: "10%" }} />
              </colgroup>
              <thead className="table-light">
                <tr>
                  <th>Payment Method</th>
                  <th>Payee Details</th>
                  <th>Payee Name</th>
                  <th>Bank Details</th>
                  <th>Your Reference</th>
                  <th>Payment Reference</th>
                  <th>Amount</th>
                </tr>
              </thead>
              <tbody>
                {payments.map((p, i) => (
                  <tr key={i}>
                    <td>
                      <select
                        className="form-select form-select-sm"
                        name="paymentMethod"
                        value={p.paymentMethod}
                        onChange={(e) => onPayment(i, e)}
                        required
                      >
                        <option value="">Select Method</option>
                        <option value="Account Number">Account Number</option>
                        {/* add other methods as needed */}
                      </select>
                    </td>
                    <td>
                      <input
                        className="form-control form-control-sm"
                        name="payeeDetails"
                        value={p.payeeDetails}
                        onChange={(e) => onPayment(i, e)}
                        required
                      />
                    </td>
                    <td>
                      <input
                        className="form-control form-control-sm"
                        name="payeeName"
                        value={p.payeeName}
                        onChange={(e) => onPayment(i, e)}
                        required
                      />
                    </td>
                    <td>
                      <input
                        className="form-control form-control-sm"
                        name="bankDetails"
                        value={p.bankDetails}
                        onChange={(e) => onPayment(i, e)}
                        required
                      />
                    </td>
                    <td>
                      <input
                        className="form-control form-control-sm"
                        name="yourReference"
                        value={p.yourReference}
                        onChange={(e) => onPayment(i, e)}
                      />
                    </td>
                    <td>
                      <input
                        className="form-control form-control-sm"
                        name="paymentReference"
                        value={p.paymentReference}
                        onChange={(e) => onPayment(i, e)}
                      />
                    </td>
                    <td>
                      <input
                        className="form-control form-control-sm"
                        type="number"
                        name="amount"
                        value={p.amount}
                        onChange={(e) => onPayment(i, e)}
                        required
                      />
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          <button
            type="button"
            className="btn btn-outline-secondary mb-4"
            onClick={addRow}
          >
            + Add Payment Row
          </button>

          {/* ============ Actions row ============ */}
          <div className="d-flex justify-content-between align-items-center">
            {/* BackToDashboard on the left in the same row */}
            <div>
              <BackToDashboard />
            </div>

            {/* Save + Submit on the right */}
            <div className="d-flex gap-2">
              <button
                type="button"
                className="btn btn-outline-secondary"
                onClick={saveDraft}
              >
                Save as Draft
              </button>
              <PrimaryButton type="submit">Submit</PrimaryButton>
            </div>
          </div>
        </form>
      </div>
    </div>
  );
}

this is the entire code which is working just update with payrollpayment page when your free only single file update

Alright Saagar — here’s the **updated Header.jsx** and the **final App.js** together so you can just drop them in.

---

## **`src/common/components/Header.jsx`**

```jsx
import React from 'react';
import { useLocation } from 'react-router-dom';
import logo from '../../assets/sc-logo.png';

export default function Header({ children }) {
  const location = useLocation();
  const isLoginPage = location.pathname === '/';

  return (
    <header className="brand-gradient d-flex align-items-center px-3 py-2 shadow-sm">
      <img src={logo} alt="Standard Chartered" className="header-logo" />
      <h1 className="h5 mb-0 text-white">Payment Initiations</h1>
      {/* Render extra content like Logout button */}
      {!isLoginPage && <div className="ms-auto">{children}</div>}
    </header>
  );
}
```

---

## **`src/App.js`**

```jsx
import React from 'react';
import { Routes, Route, NavLink, useLocation, useNavigate } from 'react-router-dom';
import Header from './common/components/Header';
import Footer from './common/components/Footer';
import Login from './pages/login/Login';
import Dashboard from './pages/dashboard/Dashboard';
import PayrollPayment from './pages/payroll/PayrollPayment';
import ExcelInput from './pages/excel-input/ExcelInput';
import TransactionList from './pages/transaction-list/TransactionList';
import Approval from './pages/approval/Approval';
import AccountBalance from './pages/account-balance/AccountBalance';
import PrintPreview from './pages/print-preview/PrintPreview';

export default function App() {
  const location = useLocation();
  const navigate = useNavigate();
  const allowedPages = JSON.parse(localStorage.getItem('allowedPages') || '[]');

  const logout = () => {
    localStorage.removeItem('allowedPages');
    navigate('/');
  };

  const isLoginPage = location.pathname === '/';

  return (
    <div className="app d-flex flex-column min-vh-100">
      {!isLoginPage && (
        <Header>
          <button
            className="btn btn-light btn-sm"
            style={{
              backgroundColor: '#0072CE',
              color: '#fff',
              border: 'none',
              padding: '5px 12px',
              borderRadius: '4px'
            }}
            onClick={logout}
          >
            Logout
          </button>
        </Header>
      )}

      <div className="container-fluid py-3 flex-grow-1">
        <div className="row">
          {!isLoginPage && (
            <aside className="col-12 col-md-2 mb-3 mb-md-0">
              <nav className="list-group shadow-sm">
                {allowedPages.map(({ name, path }) => (
                  <NavLink
                    key={path}
                    to={path}
                    end
                    className={({ isActive }) =>
                      'list-group-item list-group-item-action' +
                      (isActive ? ' active' : '')
                    }
                  >
                    {name}
                  </NavLink>
                ))}
              </nav>
            </aside>
          )}

          <main className={isLoginPage ? 'col-12' : 'col-12 col-md-10'}>
            <Routes>
              <Route path="/" element={<Login />} />
              <Route path="/dashboard" element={<Dashboard />} />
              <Route path="/payroll" element={<PayrollPayment />} />
              <Route path="/excel" element={<ExcelInput />} />
              <Route path="/txns" element={<TransactionList />} />
              <Route path="/approvals" element={<Approval />} />
              <Route path="/balances" element={<AccountBalance />} />
              <Route path="/print" element={<PrintPreview />} />
            </Routes>
          </main>
        </div>
      </div>

      {!isLoginPage && <Footer />}
    </div>
  );
}
```

---

### **What’s New**

1. **Header.jsx**:

   * Shows **Standard Chartered logo**.
   * Uses **brand gradient** background.
   * Accepts `children` prop so we can pass Logout button from App.js.
2. **App.js**:

   * Sidebar + Footer only render after login.
   * Logout button styled with SC blue, white text, rounded corners.
   * Clicking logout → clears `localStorage` and redirects to login.

---

If you want, I can also **update your `styles.css`** so the brand gradient exactly matches Standard Chartered’s primary color palette.
Do you want me to do that next so the whole UI is consistent?
